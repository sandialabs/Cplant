#!/usr/bin/perl
# $Id: showmesh.antarctica,v 1.5 2002/01/02 21:19:18 jbogden Exp $
#
###############################################################################
# showmesh
#
# perl script that parses pingd output and formats it like the
# Puma showmesh command.
# 02/07/2001, dwdoerf
# Updated to arbitrarily order the columns. This allows the mesh output
# to represent physical SU layout.
###############################################################################

# Machine dependent parameters
$machine = "antarctia";
@plane0 = (50,40,58,48,49,59,41,51);
@plane1 = (52,42,60,66,67,61,43,53);
@plane2 = (54,44,62,68,69,63,45,55);
@plane3 = (56,46,64,70,71,65,47,57);
@plane4 = (36,38,34,32,33,35,39,37);
@plane5 = (40,42,44,46,47,45,43,41);
@included_SUs = (@plane0,@plane1,@plane2,@plane3,@plane4,@plane5);
$plane_size = 8;
$maxnode = 31;

$cplant_path = "CPLANT_PATH";
$PINGD         = "$cplant_path/sbin/pingd|";

%nodes         = ();
%jobs          = ();
$jobcharbase   = "";
$jobcharindex  =  0;
$jobcharlen    =  1;

$nodename = `uname -n`;
if ($nodename =~ /alaska/i) {
  $servicenode   = 15;
} else {
  $servicenode   = 0;
}

$stalechar     = "-";
$availchar     = "*";
$unknownchar   = "?";
$allocatedchar = "+";
$unavailchar   = "X";
$servicechar   = "S";

###############################################################################
# Parse the pingd output
###############################################################################

# open up a read pipe from pingd
open PINGD or die "**Internal error** - unable to start $PINGD";

# get the first line of output
$_= <PINGD>;

# look for problems
if ( (/Can not register myself as PPID=/)       ||
     (/can't locate bebopd registry file name/) ||
     (/Sorry, unable to locate bebopd/)          ) {
    die "**Internal error** - unable to determine status\n";
}

# get the next line of output
$_ = <PINGD>;

# look for problems
if ( /No reponse with data from bebopd, sorry/ ) {
    die "**Internal error** - unable to determine status\n";
}

# everything should be ok
# eat the next three lines
$i = 3;
while ( <PINGD> && --$i ) {};

# grab information about each node    
while( <PINGD> ) {

    # node has a job running
    if ( /^\s*(\d+)\s+\(\s+SU-(\d+)\s+n-(\d+)\s+\)\s+(\d+)\s+(\d+)\/\s*(\d+)\s+(\w+)\s+(\d+):(\d+):(\d+)/ ) {

	$pnid = int $1;
	$su   = int $2;
        $node = int $3;
	$jid  = int $4;
	#$pid  = int $5;
        $rank = int $6;
        $user = $7;
        $hour = int $8;
        $min  = int $9;
        $sec  = int $10;

        # process job not seen before
	if ( ! defined $jobs{ $jid } ) {

	    if ( $jobcharindex > 25 ) {
		$jobcharbase .= 'a';
		$jobcharindex = 0;
		$jobcharlen++;
	    }

	    $jobs{$jid}          = $jobcharbase . chr( 97 + $jobcharindex );
	    $jobs{$jid}{user}    = $user;
            $jobs{$jid}{maxrank} = $rank;
            $jobs{$jid}{time}    = 0;
	    $jobcharindex++;
	}

        # process a job seen before
	$nodes{$node}{$su} = $jobs{$jid};
 
        $jobs{$jid}{time} += ($hour * 3600) + ($min * 60) + $sec;

        # figure out how big the job is
	if ( $jobs{$jid}{maxrank} < $rank ) {
	    $jobs{$jid}{maxrank} = $rank;
	}

    }

    # stale node
    if ( /^\s*(\d+)\s+\(\s+SU-(\d+)\s+n-(\d+)\s+\)\s+node data is stale/ ) {

	$pnid = int $1;
	$su   = int $2;
        $node = int $3;

	$nodes{$node}{$su} = $stalechar;

    }

    # node reported in for allocation
    if ( /^\s*(\d+)\s+\(\s+SU-(\d+)\s+n-(\d+)\s+\)\s+node reported in for possible allocation/ ) {

        $pnid = int $1;
        $su   = int $2;
        $node = int $3;

        $nodes{$node}{$su} = $allocatedchar;

    }

    # unavailable node
    if ( /^\s*(\d+)\s+\(\s+SU-(\d+)\s+n-(\d+)\s+\)\s+node is unavailable/ ) {

	$pnid = int $1;
	$su   = int $2;
        $node = int $3;

	$nodes{$node}{$su} = $unavailchar;

    }

    # free node
    if ( /^\s*(\d+)\s+\(\s+SU-(\d+)\s+n-(\d+)\s+\)\s*$/ ) {

	$pnid = int $1;
	$su   = int $2;
        $node = int $3;

	$nodes{$node}{$su} = $availchar;

    }

    # get total
    if ( /^Total: (\d+)$/ ) {

	#$total = $1;

    }

    # get total busy
    if ( /^Total busy: (\d+)$/ ) {

	#$busy = $1;

    }

    # get total free
    if ( /^Total free: (\d+)$/ ) {

	$free = $1;

    }

    # get total not responding
    if ( /Total not responding to ping \(try again\): (\d+)$/ ) {

	#$dead = $1;

    }

}

# close the pipe
close PINGD;

###############################################################################
# Form the mesh display
###############################################################################
$pad = "   ";

#print the su numbering header
print $pad," ";
$jobwidth = ($jobcharlen + 1);
$i=0;
foreach $su (@included_SUs) {
    if ( $i == $plane_size ) {
        print "  ";
        $i=0;
    }
    if ($su/10) {
        printf "%${jobwidth}d",$su/10;
    }
    ++$i;
}
print "\n",$pad," ";
$i=0;
foreach $su (@included_SUs) {
    if ( $i == $plane_size ) {
        print "  ";
        $i=0;
    }
    printf "%${jobwidth}d",$su%10;
    ++$i;
}

#print the top of the frame
print "\n",$pad,"+-";
$i=0;
foreach $su (@included_SUs) {
    if ( $i == $plane_size ) {
        printf("%s","+-");
       $i=0;
    }
    for ( $j=0; $j<$jobwidth; $j++ ) {
        print "-";
    }
    ++$i;
}
print "+\n";

# print the "mesh"
for ( $node=0; $node<=$maxnode; $node++ ) {
    printf("%3d| ",$node);
    $i = 0;
    foreach $su (@included_SUs) {
        if ( $i == $plane_size ) {
            printf("%${jobcharlen}s ","|");
	    $i=0;
	}
        if ( ! defined $nodes{$node}{$su} ) {
#	    if ( $node == $servicenode ) {
#	        $newstring = $servicechar;
#	    }
#	    else {
	        $newstring = $unknownchar;
#	    }
	}
	else {
	    $newstring = $nodes{$node}{$su};
	}
        printf("%${jobcharlen}s ",$newstring);
	++$i;
    }
    print "|\n";
}

#print the bottom of the frame
print $pad,"+-";
$i=0;
foreach $su (@included_SUs) {
    if ( $i == $plane_size ) {
        printf("%s","+-");
        $i=0;
    }
    for ( $j=0; $j<$jobwidth; $j++ ) {
        print "-";
    }
    ++$i;
}
print "+\n";

# print the legend
print "Legend:\n";
print " $servicechar    service node\n";
print " $unknownchar    non-existent node\n";
print " $unavailchar    dead node\n";
print " $allocatedchar    allocated node\n";
print " $stalechar    stale node\n";
print " $availchar    free node\n\n";
print "Available Cplant nodes: $free\n\n";
print " Job    ID      User    Size    Time\n"
     ."-----  ----  ---------  ----  --------\n";

format JOBS =
@>>>>  @>>>  @>>>>>>>>  @>>>  @>>>>>>>
$job, $jobs{$job}, $jobs{$job}{user}, $size, $time
.

$~ = "JOBS";

# print job info
foreach $job ( sort keys %jobs ) {
    $size = $jobs{$job}{maxrank} + 1;
    $avg  = $jobs{$job}{time} / $size;
    $hour = $avg / 3600;
    $avg  = $avg % 3600;
    $min  = $avg / 60;
    $sec  = $avg % 60;
    $time = sprintf "%.2d:%.2d:%.2d", $hour, $min, $sec;
    write;
}

$~ = "STDOUT";

print "\n\n";

