<!--
    $Id: yod.sgml,v 1.4 2001/11/25 01:33:00 lafisk Exp $
-->

<!doctype qwertz system>

<manpage title="yod" sectnum="1L" date='"03 May 2001"'
    footer='"Cplant"' main='"Cplant Utilities"'>


<sect1> NAME
    <p>
    <bf/yod/ &mdash Load a Cplant parallel application
    </p>



<sect1> SYNOPSIS
    <p>
    <bf/yod/ &lcub;<it/yod-options/&rcub 
	<bf/program-path-name/ &lcub;<it/program-arguments/&rcub 
    </p>

    <p>
    OR
    </p>

    <p>
    <bf/yod/ &lcub;<it/yod-options/&rcub <bf/load-file-name/
    </p>

    <p>
    YOD-OPTIONS:
    </p>

    <p>
	&lsqb;<bf/-alloc/&rsqb &lsqb;<bf/-attach/&rsqb &lsqb;<bf/-bt/ &rsqb
	&lsqb;<bf/-D/&rsqb &lsqb;<bf/-d/ <it/info-type/&rsqb &lsqb;<bf/-file/ <it/file-name/&rsqb 
    </p>

    <p>
	&lsqb;<bf/-help &verbar; -vhelp/&rsqb &lsqb;<bf/-interactive &verbar; -batch/&rsqb
	&lsqb;<bf/-kill/ &rsqb &lsqb;<bf/-list/ <it/node-list/ &rsqb
    </p>

    <p>
	&lsqb;<bf/-Log/&rsqb &lsqb;<bf/-nid/ <it/node-number/ <bf/-pid/ <it/portal-id/&rsqb
	&lsqb;<bf/-NOBUF/&rsqb &lsqb;<bf/-quiet/&rsqb &lsqb;<bf/-show/&rsqb
	&lsqb;<bf/-sleep/ <it/where/&rsqb
    </p>

    <p>
	&lsqb;<bf/-strace/ <it/path-name/&rsqb &lsqb;<bf/-straceoptions/ <it/option-list/&rsqb &lsqb;<bf/-stracenodes/ <it/rank-list/&rsqb
    </p>

    <p>
	&lsqb;<bf/-sz/ <it/nodes/&rsqb &lsqb;<bf/-timing/&rsqb &lsqb;<bf/-nice/&rsqb
    </p>

<sect1> DESCRIPTION
    <p>
    <bf/yod/ is a utility that loads a parallel application onto
    a set of compute nodes.  File operations performed by the
    compute node processes (if not directed to a parallel IO facility) 
    are transparently forwarded to yod 
    which executes the operations and returns the results to the
    application.
    <bf/yod/ exits when each member of the parallel application
    has exited.
    </p>
    <p>
    Here is a typical use of <bf/yod/.  It loads <bf/myCode/ on
    64 nodes, and passes the command line argument <bf/-i input.dat/
    to each process of the parallel program.
    </p>
    <p><tt>
    yod -sz 64 myCode -i input.dat
    </tt></p>
    <p>
    The <it /program-arguments/, along with your environment, will 
    be sent along to the compute node processes.  The standard input 
    of yod is the standard input of the compute node processes.  The 
    standard input is not duplicated, so if node 0 reads some bytes from
    standard input, the next read of standard input from any node in
    the parallel application will get the next bytes in the stream.
    </p>
    <p>
    It is possible to send a SIGUSR1 or SIGUSR2 to a parallel
    application by sending the signal to <bf/yod/.  <bf/yod/ will
    forward the signal to the user application processes.
    (Type <it/kill -s SIGUSR1 yod-pid/ on the node running
    <bf/yod/ to send the application processes a SIGUSR1.)
    </p>
    <p>
    Interrupting <bf/yod/ with <tt/control-c/ causes it to interrupt
    the application processes with a SIGTERM.  <bf/yod/ will await
    completion messages from the compute nodes.  If <bf/yod/
    seems stuck, interrupt with <tt/control-c/ again.  This will
    cause <bf/yod/ to interrupt the application processes with a
    SIGKILL.  If <bf/yod/ still seems stuck, interrupt with
    <tt/control-c/ a third time.  <bf/yod/ will simply reset the
    compute nodes and exit.
    </p>
    <p>
    An alternative to killing a job through <bf/yod/ is to run
    <it/pingd -reset -mine/ to reset the compute nodes hosting
    your application.  Your application processes will
    be sent a SIGKILL, and the compute nodes released for other users.
    You may use the command <it/pingd -interrupt -mine/ to send a SIGTERM
    to all of your parallel applications.  See the <bf/pingd/ man page
    for other ways to specify nodes or jobs for the command to
    act upon.
    </p>
    <p>
    When loading a single executable file onto the compute partition,
    list the <bf/executable path name/ followed by your program
    arguments on the <bf/yod/ command line.  To load more than one
    executable file, or to specify different command line arguments
    to different processes, (heterogeneous load) specify the command lines
    in process rank order in a load file.  List the <bf/load file name/
    as the argument to <bf/yod/.
    </p>

<sect1> LOAD FILE FORMAT
    <p>
    Your load file is a text file you create with your favorite text
    editor.  It has two kinds of entries: comments and application
    members.  Comments are lines on which the first text that appears 
    is a pound sign (<bf/#/).  These are ignored by <bf/yod/.  The other
    type of entry lists a member of the parallel application and has
    this format:
    </p>
    <p>
    &lcub;<it/yod-options/&rcub;
	<bf/program-path-name/ &lcub;<it/program-arguments/&rcub
    </p>
    <p>
    The only yod options accepted in a load file are <bf/-sz/ and
    <bf/-list/.  
    </p>
    <p>
    Example:
    </p>
    <p><tt>
    yod -l 100..200 myLoadFile
    </tt></p>
    <p>
    The contents of <it/myLoadFile/ are listed here:
    </p>
    <p><tt>
    #<newline>
    # load file to run my computation and parallel vis server<newline>
    #<newline>
    -sz 2 -l 500,501 my-vis-code bufsize=2048<newline>
    -sz 64 my-computational-code<newline>
    </tt></p>
    <p>
    In this example, the executable file <it/my-vis-code/ will be loaded
    on nodes 500 and 501, will be passed the argument <it/bufsize=2048/,
    and will be ranks 0 and 1 in the parallel application.  The executable
    file <it/my-computational-code/ will be loaded on 64 free nodes found in
    the node number list 100 through 200.  These processes will have ranks
    2 through 65 in the parallel application.  MPI users note that the
    66 processes described will populate a single MPI_COMM_WORLD on application
    start up.
    </p>
    <p>
    If a load file is provided, any size argument given on the <bf/yod/
    command line is ignored.
    If there is no node list given in the load file for a member, then 
    the node list given on the yod command line will be used.  If in
    addition there is no node list given on the yod command line, then
    the requested nodes will be allocated from anywhere among the 
    general collection of free nodes.  If there is no size argument
    provided in the load file, but a node list is provided, it will be
    assumed that you want all the nodes in the node list.  If there
    is no size argument provided in the load file and also no node list,
    it will be assumed that you want one node from anywhere.
    </p>

<sect1> YOD OPTIONS
    <p>
    <descrip>

    <tag/-alloc/
	<p>
	Choosing <it/-alloc/ was useful for compute node debugging
	before the availability of <bf/cgdb/ or <bf/Totalview/.  
	It displays the nodes
	on which your application has been started and waits for you to press
	a key before allowing the processes in your parallel application
	to procede out of system code and into user code.  You 
	could at this point log in to
	a compute node and attach a debugger to your application to
	catch it before it procedes to <it/main/.
	Since users are discouraged from logging into compute nodes,
	it would be better for you to use <it/-attach/ and <bf/cgdb/.
	Also see the <it/-bt/ option of yod.
	</p>

    <tag/-attach/
	<p>
        This option is essentially the same as <it/-alloc/.  It is intended
        to hold the application processes once they have started executing
        at an instruction prior to user code (prior to <it/main/).  You can
        at this point start <bf/cgdb/ to attach a debugger to a process.  See
        the <bf/cgdb/ man page for more help on debugging compute node processes.

    <tag/-batch/
	<p>
	This option informs <bf/yod/ that it is not being run 
	interactively.  In this case, <bf/yod/ will not wait for user
        responses in certain circumstances.  For example, if one of your
        application processes terminates abnormally (with a non-zero exit
        code or as the result of a signal), <bf/yod/ will automatically
        kill your parallel application for you.  Normally your application
        is not killed if some processes are still running.
	The default is that you are not running in <it/batch/ mode.
        See <it/-interactive/.
	</p>

    <tag/-bt/
	<p>
	This option will cause <bf/yod/ to display a stack trace for
        user processes that terminate abnormally.
	<bf/yod/ normally displays a one-line completion message for each process in your
	parallel application, listing the exit code or terminating
	signal if any.  If the completion message indicates that your
	application process terminated with a
	signal and you wish to investigate, you may rebuild your application
	with debugging symbols and re-run it with the <it/-bt/ option of
	<bf/yod/.  The PCT will then attach a debugger to your process,
	collect the stack trace when it faults, and send the stack
	trace to <bf/yod/ for display.
	</p>


    <tag/-D/
	<p>
	Turn on debugging of the application load.  The steps in 
	the load protocol are displayed as the application load progresses. 
	Application process file IO requests are displayed as <bf/yod/
	receives them.
	</p>

    <tag/-file <it/file-name//
	<p>
	When all processes in the parallel application have completed,
	<bf/yod/ displays a one line completion message for each process.
	This message lists the wall-clock time elapsed from start to
	finish for the process, and the exit code and terminating
	signal, if any, for the process.  By default the listing goes
	to stdout, but may be redirected to a file with this option.
	</p>

    <tag/-help/
    <tag/-vhelp/
	<p>
	<it/-help/ option displays a usage message for <bf/yod/, <it/-vhelp/
	displays a more verbose message.
	</p>

    <tag/-interactive/
	<p>
	This option informs <bf/yod/ that it is being run interactively
	by a living user.  This is the default mode.  If <bf/yod/ is
	being run by a script, be certain to specify <bf/-batch/ on the
	command line.  One difference between interactive mode and
	batch mode is that if the load fails on one node, interactive 
	mode waits for the user to interrupt <bf/yod/ with control-c
	before cancelling the load on all allocated nodes.  Batch mode
	goes ahead and cancels the load.
	</p>

    <tag/-kill/
        <p>
   When <bf/yod/ is run in interactive mode (the default) and a process
   of a parallel application terminates abnormally, <bf/yod/ displays the
   fact that the process terminated but does not kill the other
   processes in the job.  The user may choose to abort the job by
   terminating <bf/yod/ with control-C.
 
   If the user wishes <bf/yod/ to automatically kill the application when
   one or more processes terminates abnormally, then use the <it/-kill/
   option to yod.
	</p>

    <tag/-list <it/node-list//
        <p>
        If a <it/node-list/ is provided on the <bf/yod/ command line, then
        the nodes requested will be allocated out of this list.  If 
        <tt/-sz/ <it/n/ is specified as well, then <it/n/ nodes will be allocated
        out of the list.  If there does not exist <it/n/ free nodes in the list,
        <bf/yod/ will display an error message.  If no <tt/-sz/ option is
        specified, <bf/yod/ will assume you want all the nodes in the
        <it/node-list/.
        </p>
        <p>
	A <it/node-list/ is a list of node specifiers separated by commas.
        A node specifier is a physical node number or
        a node range.  A node range is specified by two physical
        node numbers separated
        by one or more dots.  No white space may be included in
        the <it/node-list/.  Example: <tt/-l 25..35,112..140,160,165/
        </p>
 
    <tag/-Log/
	<p>
	This option causes the compute node application load protocol 
        steps to be logged to <tt>/var/log/cplant</tt> on the compute node.
        It is intended for use by Cplant system debuggers.
	</p>

    <tag/-nice/
        <p>
        This option runs your job in a low priority mode.  If a regular
        priority job requests nodes, your job may be killed to make
        way for it.  Your job will be signalled with a SIGTERM, and 5 minutes
        later with a SIGKILL, if necessary.
        </p>

    <tag/-NOBUF/
	<p>
   <bf/yod/ displays it's own messages and also text printed by the parallel
   application processes while they are running.  Normally this
   combination of buffered (yod's status messages) and unbuffered
   (application output and yod's error messages) messages appear
   sensibly on the tty that started yod.  But if <bf/yod/ was started
   by an rsh from a remote node, the output appears garbled.  The
   <it/-NOBUF/ option solves this problem by making all <bf/yod/ output unbuffered.
	</p>

    <tag/-nid <it/node-number//
    <tag/-pid <it/portal-ID//
	<p>
	These arguments will cause <bf/yod/ to contact the bebopd on the specified
	node number and at the specified portal ID rather than the bebopd listed 
	in the <tt/cplant-host/ file.  This option is only for testing
	alternative bebopds and should be used only by Cplant developers.
	</p>
 
    <tag/-quiet/
	<p>
         <bf/yod/, like this man page, is quite verbose.  It lists many status and
         error messages as it loads and runs a parallel application.  If you wish to have
         these messages suppressed, run yod with the <it/-quiet/ option.
	</p>
 
    <tag/-show/
	<p>
         Cplant parallel applications are encoded with a version string.  <bf/yod/ will
         not load an application encoded with the wrong version string (unless you
         run <bf/yod/ with the secret <it/-xxx/ option).  The <it/-show/ option lists
         the correct version string and the version string found in your executable.
	</p>

    <tag/-sleep <it/where//
	<p>
        Cplant system debuggers may want to attach a debugger to a Cplant application
        before it is in user code.  This option provides 4 different points at which a
        the processes can be held for 60 seconds.  The options are <it/-sleep 1/ 
        (right after the fork), <it/-sleep 2/ (just before the exec), <it/-sleep 3/
        (right after entering system startup code), <it/-sleep 4/ (just before
        proceeding to <it/main/).
	</p>

    <tag/-strace <it/path-name//
	<p>
         Yet another debugging tool.  <it/path-name/ should be a directory which
         is mounted writable on the compute node.  This option will cause the PCT
         to run the application process under strace which will list all
         system calls (and their arguments) made by the application process.  By
         default, only the rank 0 process is traced.  The strace output goes to
         a file in directory <it/path-name/.  The file name contains the Cplant job ID
         and the rank of the process being traced.
	</p>

    <tag/-straceoptions <it/option-list//
	<p>
         The PCT will invoke strace with the options you specify in the quoted
         string <it/option-list/.   
         You must use the <it/-strace/ option with this option.
	</p>

    <tag/-stracenodes <it/rank-list//
	<p>
         The PCT will invoke <it/strace/ on the processes with the ranks given in the
         <it/rank-list/.  The format for the <it/rank-list/ is the same as the format
         for a node list.  By default, strace is invoked only on the rank 0 process.
         You must use the <it/-strace/ option with this option.
	</p>

    <tag/-sz <it/nodes//
	<p>
        The number of compute nodes required to run the parallel
	application.  One member (process) of the application will
	run on each node.  The default if no node list is specified
	is <tt/-sz 1/.  The default if a node list is specified is
	the number of nodes in the node list.
	</p>

    <tag/-timing/
	<p>
	Interested in how long the different stages of application
	load are taking?  The <it/-timing/ option times them and displays
	the results in seconds.  (If our name was <bf/mpirun/ instead
	of <bf/yod/ we would display it in minutes!)
	</p>
    </descrip>

<sect1> RETURN VALUES
       <p>
       <bf/yod/ returns 0 if the parallel application terminated normally, 
       1 if the application ran and terminated abnormally, and 2 if the application
       load failed and the application never started.
       Abnormal termination occurs if one or more of the
       processes of parallel application exited with a non-zero exit code, or
       was terminated by a signal.
       </p>

<sect1> ENVIRONMENT VARIABLES
    <p>
    Environment variables that affect <bf/yod's/ behavior are described here.
    </p>
    <p>
    Occasionally a load will fail because a compute node allocated to your parallel
    application is not working.  <bf/yod/ will try to obtain a new set of nodes and
    load again.  It will try up to three times.  If you want to decrease or increase
    the number of retries, set the value of the environment variable <bf/YODRETRYCOUNT/
    to the number of times yod should retry the load.
    </p>
    <p>
    If you do not specify the full path of the executable name, <bf/yod/ will search first
    for the executable in the current working directory.  If it is not found, <bf/yod/
    will use the <bf/PATH/ variable in your environment to search for the executable.
    </p>
    <p>
    When <bf/yod/ is executed from a PBS job script, there are certain variables defined
    that are required by the runtime system.  If you do something sneaky in your PBS job
    script like rsh to another service node and run yod there, be sure to set these
    environment variables in the new shell to the same value they have in the
    original shell: <bf/PBS_ENVIRONMENT/, <bf/PBS_BATCH/, <bf/PBS_JOBID/, <bf/PBS_NNODES/.
    </p>



<sect1> SEE ALSO
    <p>
    <bf>pingd</bf>
    <bf>PCT</bf>
    <bf>bebopd</bf>
    <bf>cgdb</bf>
    </p>

</manpage>
