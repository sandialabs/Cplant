  <!-- manual page source format generated by PolyglotMan v3.0.9, -->
<!-- available via anonymous ftp from ftp.cs.berkeley.edu:/ucb/people/phelps/tcltk/rman.tar.Z -->

<HTML>
<HEAD>
<TITLE>yod(1L) manual page</TITLE>
</HEAD>
<BODY bgcolor=white>
<A HREF="#toc">Table of Contents</A><P>
 
<H2><A NAME="sect0" HREF="#toc0">Name</A></H2>
    <BR>
 <P>
  <B>yod</B> -- Load a Cplant parallel application 
<H2><A NAME="sect1" HREF="#toc1">Synopsis</A></H2>
    <BR>
 <P>
  <B>yod</B> {<I>yod-options</I>}  <B>program-path-name</B> {<I>program-arguments</I>} 
  <P>
  OR  
  <P>
  <B>yod</B> {<I>yod-options</I>} <B>load-file-name</B>  
  <P>
  YOD-OPTIONS:  
  <P>
  [<B>-alloc</B>] [<B>-attach</B>] [<B>-bt</B> ][<B>-D</B>] [<B>-d</B> <I>info-type</I>] [<B>-file</B> <I>file-name</I>]   
  <P>
  [<B>-help | -vhelp</B>] [<B>-interactive | -batch</B>][<B>-kill</B> ] [<B>-list</B> <I>node-list</I>]  
  <P>
  [<B>-Log</B>] [<B>-nid</B> <I>node-number</I> <B>-pid</B> <I>portal-id</I>][<B>-NOBUF</B>] [<B>-quiet</B></B>] [<B>-show</B>][<B>-sleep</B> <I>where</I>]  
  <P>
  [<B>-strace</B> <I>path-name</I>] [<B>-straceoptions</B> <I>option-list</I>] [<B>-stracenodes</B> <I>rank-list</I>] 
  <P>
  [<B>-sz</B> <I>nodes</I>] [<B>-timing</B>] 
  <P>
<H2><A NAME="sect2" HREF="#toc2">Description</A></H2>
    <BR>
 <P>
  <B>yod</B> is a utility that loads a parallel application onto a set of compute
nodes.  File operations performed by the compute node processes (if not
directed to a parallel IO facility)  are transparently forwarded to yod
 which executes the operations and returns the results to the application.
<B>yod</B> exits when each member of the parallel application has exited.  
<P>
Here is a typical use of <B>yod</B>.  It loads <B>myCode</B> on 64 nodes, and passes the command
line argument <B>-i input.dat</B> to each process of the parallel program.  
<P>
yod -sz 64 myCode -i input.dat  
<P>
The <I>program-arguments</I>, along with your environment,
will  be sent along to the compute node processes.  The standard input 
of yod is the standard input of the compute node processes.  The  standard
input is not duplicated, so if node 0 reads some bytes from standard input,
the next read of standard input from any node in the parallel application
will get the next bytes in the stream.  
<P>
It is possible to send a SIGUSR1
or SIGUSR2 to a parallel application by sending the signal to <B>yod</B>.  <B>yod</B>
will forward the signal to the user application processes. (Type <I>kill -s
SIGUSR1 yod-pid</I> on the node running <B>yod</B> to send the application processes
a SIGUSR1.)  
<P>
Interrupting <B>yod</B> with CRcontrol-c causes it to interrupt the
application processes with a SIGTERM.  <B>yod</B> will await completion messages
from the compute nodes.  If <B>yod</B> seems stuck, interrupt with CRcontrol-c again.
 This will cause <B>yod</B> to interrupt the application processes with a SIGKILL.
 If <B>yod</B> still seems stuck, interrupt with CRcontrol-c a third time.  <B>yod</B>
will simply reset the compute nodes and exit.  
<P>
An alternative to killing
a job through <B>yod</B> is to run <I>pingd -reset -mine</I> to reset the compute nodes
hosting your application.  Your application processes will be sent a SIGKILL,
and the compute nodes released for other users. You may use the command
<I>pingd -interrupt -mine</I> to send a SIGTERM to all of your parallel applications.
 See the <B>pingd</B> man page for other ways to specify nodes or jobs for the
command to act upon.  

<P>
When loading a single executable file onto the compute
partition, list the <B>executable path name</B> followed by your program arguments
on the <B>yod</B> command line.  To load more than one executable file, or to specify
different command line arguments to different processes, (heterogeneous
load) specify the command lines in process rank order in a load file.  List
the <B>load file name</B> as the argument to <B>yod</B>. 

<H2><A NAME="sect3" HREF="#toc3">Load File Format</A></H2>
    <BR>
 <P>
  Your load file is a text file you create with your favorite text editor.
 It has two kinds of entries: comments and application members.  Comments
are lines on which the first text that appears  is a pound sign (<B>#</B>).  These
are ignored by <B>yod</B>.  The other type of entry lists a member of the parallel
application and has this format:  
 <P>
{<I>yod-options</I>} <B>program-path-name</B> {<I>program-arguments</I>}
 <P>
 The only yod options accepted in a load file are <B>-sz</B> and <B>-list</B>.    
 <P>
 Example:
 <P>
 yod -l 100..200 myLoadFile  
 <P>
 The contents of <I>myLoadFile</I> are listed here:
 <P>
# <BR>
# load file to run my computation and parallel vis server <BR>
# <BR>
 <P>
-sz 2 -l 500,501 my-vis-code bufsize=2048 <BR>
-sz 64 my-computational-code   
 <P>
In this example, the executable file <I>my-vis-code</I>

will be loaded on nodes 500 and 501, will be passed the argument <I>bufsize=2048</I>,
and will be ranks 0 and 1 in the parallel application.  The executable file
<I>my-computational-code</I> will be loaded on 64 free nodes found in the node number
list 100 through 200.  These processes will have ranks 2 through 65 in the
parallel application.  MPI users note that the 66 processes described will
populate a single MPI_COMM_WORLD on application start up.  
 <P>
If a load file
is provided, any size argument given on the <B>yod</B> command line is ignored.
If there is no node list given in the load file for a member, then  the
node list given on the yod command line will be used.  If in addition there
is no node list given on the yod command line, then the requested nodes
will be allocated from anywhere among the  general collection of free nodes.
 If there is no size argument provided in the load file, but a node list
is provided, it will be assumed that you want all the nodes in the node
list.  If there is no size argument provided in the load file and also no
node list, it will be assumed that you want one node from anywhere. 
<H2><A NAME="sect4" HREF="#toc4">Yod
Options</A></H2>
    <BR>
 <P>
  <P>
<P>
 
<DL>

<DT><I>-alloc</I> </DT>
<DD>    Choosing <I>-alloc</I> was useful for compute node debugging before
the availability of <B>cgdb</B> or <B>Totalview</B>.  
It displays the nodes on which your application
has been started and waits for you to press a key before allowing the processes
in your parallel application to procede out of system code and into user
code.  You  could at this point log in to a compute node and attach a debugger
to your application to catch it before it procedes to <I>main</I>. Since users
are discouraged from logging into compute nodes, it would be better for
you to use <I>-attach</I> and <B>cgdb</B>. Also see the <I>-bt</I> option of yod. <P>
 </DD>

<DT><I>-attach</I> </DT>
<DD>    This
option is essentially the same as <I>-alloc</I>.  It is intended to hold the application
processes once they have started executing at an instruction prior to user
code (prior to <I>main</I>).  You can at this point start <B>cgdb</B> to attach a debugger
to a process.  See the <B>cgdb</B> man page for more help on debugging compute
node processes.  </DD>

<DT><I>-batch</I> </DT>
<DD>    This option informs <B>yod</B> that it is not being
run  interactively.  In this case, <B>yod</B> will not wait for user responses
in certain circumstances.  For example, if one of your application processes
terminates abnormally (with a non-zero exit code or as the result of a signal),
<B>yod</B> will automatically kill your parallel application for you.  Normally
your application is not killed if some processes are still running. The
default is that you are not running in <I>batch</I> mode. See <I>-interactive</I>. <P>
 </DD>

<DT><I>-bt</I> </DT>
<DD>
   This option will cause <B>yod</B> to display a stack trace for user processes
that terminate abnormally. <B>yod</B> normally displays a one-line completion message
for each process in you
r parallel application, listing the exit code or
terminating signal if any.  If the completion message indicates that your
application process terminated with a signal and you wish to investigate,
you may rebuild your application with debugging symbols and re-run it with
the <I>-bt</I> option of <B>yod</B>.  The PCT will then attach a debugger to your process,
collect the stack trace when it faults, and send the stack trace to <B>yod</B>
for display. <P>
 <P>
 </DD>

<DT><I>-D</I> </DT>
<DD>    Turn on debugging of the application load.  The steps
in  the load protocol are displayed as the application load progresses.
 Application process file IO requests are displayed as <B>yod</B> receives them.
<P>
 </DD>

<DT><I>-file <I>file-name</I></I> </DT>
<DD>    When all processes in the parallel application have
completed, <B>yod</B> displays a one line completion message for each process.
This message lists the wall-clock time elapsed from start to finish for
the process, and the exit code and terminating signal, if any, for the
process.  By default the listing goes to stdout, but may be redirected to
a file with this option. <P>
 </DD>

<DT><I>-help</I> </DT>
<DD></DD>

<DT><I>-vhelp</I> </DT>
<DD>    <I>-help</I> option displays a usage message
for <B>yod</B>, <I>-vhelp</I> displays a more verbose message. <P>
 </DD>

<DT><I>-interactive</I> </DT>
<DD>    This option
informs <B>yod</B> that it is being run interactively by a living user.  This is
the default mode.  If <B>yod</B> is being run by a script, be certain to specify
<B>-batch</B> on the command line.  One difference between interactive mode and
batch mode is that if the load fails on one node, interactive  mode waits
for the user to interrupt <B>yod</B> with control-c before cancelling the load
on all allocated nodes.  Batch mode goes ahead and cancels the load. <P>
 </DD>

<DT><I>-kill</I>
</DT>
<DD>    When <B>yod</B> is run in interactive mode (the default) and a process of
a parallel application terminates abnormally, <B>yod</B> displays the fact that
the process terminated but does not kill the other processes in the job.
 The user may choose to abort the job by terminating <B>yod</B> with control-C.
 If the user wishes <B>yod</B> to automatically kill the application when one
or more processes terminates abnormally, then use the <I>-kill</I> option to yod.
<P>
 </DD>

<DT><I>-list <I>node-list</I></I> </DT>
<DD>    If a <I>node-list</I> is provided on the <B>yod</B> command line, then
the nodes requested will be allocated out of this list.  If  CR-sz <I>n</I> is specified
as well, then <I>n</I> nodes will be allocated out of the list.  If there does
not exist <I>n</I> free nodes in the list, <B>yod</B> will display an error message. 
If no CR-sz option is specified, <B>yod</B> will assume you want all the nodes
in the <I>node-list</I>.  A <I>node-list</I> is a list of node specifiers separated by commas.
A node specifier is a physical node number or a node range.  A node range
is specified by two physical node numbers separated by one or more dots.
 No white space may be included in the <I>node-list</I>.  Example: CR-l 25..35,112..140,160,165
 <BR>
 </DD>

<DT><I>-Log</I> </DT>
<DD>    This option causes the compute node application load protocol
 steps to be logged to CR/var/log/cplant on the compute node. It is intended
for use by Cplant system debuggers. <P>
 </DD>

<DT><I>-NOBUF</I> </DT>
<DD>    <B>yod</B> displays it's own messages
and also text printed by the parallel application processes while they
are running.  Normally this combination of buffered (yod's status messages)
and unbuffered (application output and yod's error messages) messages appear
sensibly on the tty that started yod.  But if <B>yod</B> was started by an rsh
from a remote node, the output appears garbled.  The <I>-NOBUF</I> option solves
this problem by making all <B>yod</B> output unbuffered
. <P>
 </DD>

<DT><I>-nid <I>node-number</I></I> </DT>
<DD></DD>

<DT><I>-pid <I>portal-ID</I></I>
</DT>
<DD>    These arguments will cause <B>yod</B> to contact the bebopd on the specified
node number and at the specified portal ID rather than the bebopd listed
 in the CRcplant-host file.  This option is only for testing alternative
bebopds and should be used only by Cplant developers.  <BR>
 </DD>

<DT><I>-quiet</I> </DT>
<DD>    <B>yod</B>, like this man page, is quite verbose.  It lists many status
and error messages as it loads and runs a parallel application.  If you
wish to have these messages suppressed, run yod with the <I>-quiet</I> option. 
<BR>
 </DD>

<DT><I>-show</I> </DT>
<DD>    Cplant parallel applications are encoded with a version string.
 <B>yod</B> will not load an application encoded with the wrong version string
(unless you run <B>yod</B> with the secret <I>-xxx</I> option).  The <I>-show</I> option lists
the correct version string and the version string found in your executable.
<P>
 </DD>

<DT><I>-sleep <I>where</I></I> </DT>
<DD>    Cplant system debuggers may want to attach a debugger
to a Cplant application before it is in user code.  This option provides
4 different points at which a the processes can be held for 60 seconds.
 The options are <I>-sleep 1</I>  (right after the fork), <I>-sleep 2</I> (just before
the exec), <I>-sleep 3</I> (right after entering system startup code), <I>-sleep 4</I>
(just before proceeding to <I>main</I>). <P>
 </DD>

<DT><I>-strace <I>path-name</I></I> </DT>
<DD>    Yet another debugging
tool.  <I>path-name</I> should be a directory which is mounted writable on the compute
node.  This option will cause the PCT to run the application process under
strace which will list all system calls (and their arguments) made by the
application process.  By default, only the rank 0 process is traced.  The
strace output goes to a file in directory <I>path-name</I>.  The file name contains
the Cplant job ID and the rank of the process being traced. <P>
 </DD>

<DT><I>-straceoptions
<I>option-list</I></I> </DT>
<DD>    The PCT will invoke strace with the options you specify
in the quoted string <I>option-list</I>.    You must use the <I>-strace</I> option with
this option. <P>
 </DD>

<DT><I>-stracenodes <I>rank-list</I></I> </DT>
<DD>    The PCT will invoke <I>strace</I> on the
processes with the ranks given in the <I>rank-list</I>.  The format for the <I>rank-list</I>
is the same as the format for a node list.  By default, strace is invoked
only on the rank 0 process. You must use the <I>-strace</I> option with this option.
<P>
 </DD>

<DT><I>-sz <I>nodes</I></I> </DT>
<DD>    The number of compute nodes required to run the parallel
application.  One member (process) of the application will run on each node.
 The default if no node list is specified is CR-sz 1.  The default if a node
list is specified is the number of nodes in the node list. <P>
 </DD>

<DT><I>-timing</I> </DT>
<DD>    Interested
in how long the different stages of application load are taking?  The <I>-timing</I>
option times them and displays the results in seconds.  (If our name was
<B>mpirun</B> instead of <B>yod</B> we would display it in minutes!) </DD>
</DL>
<P>
 
<H2><A NAME="sect5" HREF="#toc5">Return Values</A></H2>
 
     <BR>
 <P>
  <B>yod</B> returns 0 if the parallel application terminated normally,  1 if
the application ran and terminated abnormally, and 2 if the application
load failed and the application never started. Abnormal termination occurs
if one or more of the processes of parallel application exited with a non-zero
exit code, or was terminated by a signal. 
<H2><A NAME="sect6" HREF="#toc6">Environment Variables</A></H2>
    <BR>
 <P>
  Environment variables that affect <B>yod's</B> behavior are described here. 
 <P>
Occasionally a load will fail because a compute node allocated to your
parallel application is not working.  <B>yod</B> will try to obtain a new set of
nodes and load again.  It will try up to three times.  If you want to decrease
or increase the number of retries, set the value of the environment variable
<B>YODRETRYCOUNT
</B> to the number of times yod should retry the load.  
 <P>
If you do not specify the full path of the executable name, <B>yod</B> will search first
for the executable in the current working directory.  If it is not found,
<B>yod</B> will use the <B>PATH</B></B> variable in your environment to search for the
executable.  
 <P>
When <B>yod</B> is executed from a PBS job script, there are certain
variables defined that are required by the runtime system.  If you do something
sneaky in your PBS 
job script like rsh to another service node and run
yod there, be sure to set these environment variables in the new shell
to the same value they have in the original shell: <B>PBS_ENVIRONMENT</B>, <B>PBS_BATCH</B>,
<B>PBS_JOBID</B>, <B>PBS_NNODES</B>. 
<H2><A NAME="sect7" HREF="#toc7">See Also</A></H2>
    <BR>
 <P>
  <B>pingd</B> <B>PCT</B> <B>bebopd</B> <B>cgdb</B> <P>

<HR><P>
<A NAME="toc"><B>Table of Contents</B></A><P>
<UL>
<LI><A NAME="toc0" HREF="#sect0">Name</A></LI>
<LI><A NAME="toc1" HREF="#sect1">Synopsis</A></LI>
<LI><A NAME="toc2" HREF="#sect2">Description</A></LI>
<LI><A NAME="toc3" HREF="#sect3">Load File Format</A></LI>
<LI><A NAME="toc4" HREF="#sect4">Yod Options</A></LI>
<LI><A NAME="toc5" HREF="#sect5">Return Values</A></LI>
<LI><A NAME="toc6" HREF="#sect6">Environment Variables</A></LI>
<LI><A NAME="toc7" HREF="#sect7">See Also</A></LI>
</UL>
</BODY></HTML>
