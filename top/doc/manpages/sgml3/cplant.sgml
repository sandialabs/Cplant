<!--
  $Id: cplant.sgml,v 1.3 2001/11/26 17:49:10 lafisk Exp $
-->

<!doctype qwertz system>

<manpage title="CPLANT" sectnum="3" date='"20 November 2001"'
    footer='"CPLANT MANPAGE"' main='"Cplant Runtime Libraries"'>


<sect1> NAME
    <p>
    Cplant* functions - access to Cplant runtime environment for a parallel application
    </p>


<sect1> SYNOPSIS
    <p>
    <bf/#include &lt;cplant.h>/
    </p>

<sect1> DESCRIPTION
    <p>
    Cplant applications are automatically linked with a library of functions
    that provide information about the current runtime environment of the
    application and of the cluster as a whole.  Other functions permit a
    Cplant application to spawn a new application, synchronize with it, and
    obtain the node ID/process ID map required to communicate with it.
    </p>
    <p>
    The functions are summarized here.  See the individual man page for each
    function for more detail.
    </p>

<sect1> SEE ALSO
    <p>
    <bf>bebopd</bf>
    <bf>yod</bf>
    <bf>yod2</bf>
    </p>

<sect1> BUGS
    <p>
    The node ID map and process ID map returned by
    <bf/CplantJobNidMap/  and <bf/CplantJobPidMap/ 
    respectively are not necessarily in process rank order, they are in
    physical node number order.
    </p>
    <p>
    The functions that query the bebopd to obtain information about
    other jobs or about the PBS queues are not fully tested.
    In addition they appear to allocate much more memory than they need
    to hold the returned information.
    </p>

<sect1> LIST OF FUNCTIONS

<p>
The following functions return information about the calling application.  They
are satisfied locally without sending a request to a remote node.
</p>
<p>
<descrip>
    <tag/CplantMyNid/ 
     <p>
     returns your physical node ID
     </p>

    <tag/CplantMyPpid/ 
     <p>
     returns your portals process ID
     </p>

    <tag/CplantMyRank/ 
     <p>
    returns your rank in the application, zero based
     </p>

    <tag/CplantMyPid/ 
     <p>
    returns your the Linux system pid (same result as <bf/getpid()/)
     </p>

    <tag/CplantMySize/ 
     <p>
    returns the number of processes in your parallel application
     </p>

    <tag/CplantMyJobId/ 
     <p>
    returns your Cplant job ID (a Cplant job is a single Cplant parallel application)
     </p>

    <tag/CplantMyPBSid/ 
     <p>
    returns your PBS job ID (a PBS job is a job script that may start many Cplant jobs)
     </p>

    <tag/CplantMyNidMap/ 
     <p>
    returns the physical Node ID map for all processes in your parallel application
     </p>

    <tag/CplantMyPidMap/ 
     <p>
    returns the portals process ID map for all processes in your parallel application
     </p>

</descrip>

<p>
The following functions return information about other Cplant jobs, or
about the PBS queues.  These queries are satisfied by sending a
request for information to the bebopd.
</p>

<p>
<descrip>
    <tag/CplantJobSize/ 
     <p>
     returns the number of processes in another parallel application
     </p>

    <tag/CplantJobNidMap/ 
     <p>
     returns the physical node ID map for another parallel application - warning, it's
     not in process rank order
     </p>

    <tag/CplantJobPidMap/ 
     <p>
     returns the portals process ID map for another parallel application - warning, it's
     not in process rank order
     </p>

    <tag/CplantJobStatus/ 
     <p>
     returns an array of status structures describing another parallel application
     </p>

    <tag/CplantPBSQueue/ 
     <p>
     returns the status of a PBS queue, as given by the <bf/qmgr -c &dquot;l q &lt;queue-name>&dquot;/
     command
     </p>

    <tag/CplantPBSqstat/ 
     <p>
     returns the information given by the PBS command <bf/qstat -a/
     </p>

    <tag/CplantPBSqueues/ 
     <p>
     returns the information given by the PBS command <bf/qstat -q/ 
     </p>

    <tag/CplantPBSserver/ 
     <p>
     returns the information given by the PBS command <bf/qmgr -c &dquot;l s&dquot;/ 
     </p>
</descrip>

<p>
The following functions may be used to spawn new applications and interact with them.
They send requests to a special version of <bf/yod/ (called <bf/yod2/) which is capable
of managing a <it/family/ of applications.  A <it/family/ refers all the jobs started
by the original Cplant application and it's descendants.
</p>

<p>
<descrip>
    <tag/CplantSpawnJob/ 
     <p>
     A request to spawn a new application.  A handle is returned.  The handle is a 
     pointer to a structure containing status information for
     the new application. 
     A collective version of the call (<bf/CplantSpawnJobGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantFamilyStatus/ 
     <p>
     A request for the latest status information for a job in my family.
     A collective version of the call (<bf/CplantFamilyStatusGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>


    <tag/CplantFamilyMap/ 
     <p>
     This call returns the physical node ID map and the portals process ID map for
     a job in my family.
     A collective version of the call (<bf/CplantFamilyMapGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantFamilyTermination/ 
     <p>
     This call returns any or all of the following information about 
     a job in my family: whether or not each process has terminated,
     the exit code for each process, the terminating signal for
     each process, and the terminator for each process (i.e. terminated by owner or
     terminated by system administrator or not terminated by an outside action).
     A collective version of the call (<bf/CplantFamilyTerminationGrp/) is available, 
     wherein node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantMyParent/ 
     <p>
     This call returns the handle for the application that spawned me, or NULL if
     I was not spawned by another Cplant application.
     A collective version of the call (<bf/CplantMyParentGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantMySelf/ 
     <p>
     This call returns the handle for my application, in the event I may want to send
     it to another application in my family that wishes to query <bf/yod2/ about me.
     A collective version of the call (<bf/CplantMySelfGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantInterjobBarrier/ 
     <p>
     This call begins a barrier between my job and one other in my family.  It returns
     a status indicating that either the barrier is in progress, or the barrier is completed.
     A collective version of the call (<bf/CplantInterjobBarrierGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantBarrierStatus/ 
     <p>
     This call sends a query to <bf/yod2/ to find out if an inter-job barrier has
     completed.  It returns a status indicating that the barrier is still in progress
     or that it has completed.
     A collective version of the call (<bf/CplantBarrierStatusGrp/) is available, wherein
     node 0 sends the request to <bf/yod2/, and broadcasts
     the results to the other processes.
     </p>

    <tag/CplantSignalJob/ 
     <p>
     This call sends a request to <bf/yod2/ to send a signal to a job in my family.
     </p>

    <tag/CplantNodesRemaining/ 
     <p>
     For PBS jobs only, this call sends a request to <bf/yod2/ to reply with the difference
     between the number of nodes allocated me by PBS, and the number of nodes in use by
     <bf/yod2/.  Note that if your PBS script started other <bf/yod/ or <bf/yod2/ processes
     this difference is less than the number of nodes you have remaining to use. 
     </p>

    <tag/CplantInitCollective/ 
     <p>
     Applications that wish to use the <bf/*Grp/ collective functions, must first
     initialize the server library group communication function.  Each process in
     the application must call this, and it contains a barrier.
     </p>

    <tag/CplantDoneCollective/ 
     <p>
     This call frees the structures required for server library group communication.
     </p>

</descrip>

<sect1> LIST OF STRUCTURES AND DEFINED VALUES
<p>
The handle returned by job spawn/status functions has the following structure:
</p>

<p><tt>
typedef struct _jobFamilyInfo{ <newline>
   int job_id;          /* Cplant job id */<newline>
   int yodHandle;       /* a handle for requests to yod */<newline>
   int status;          /* bit map of JOB_* values */<newline>
   int nprocs;          /* number of processes in the application */<newline>
   int error;           /* normally 0, non-0 if an error occured */<newline>
   void *callerHandle;  /* caller can use this, we don't */<newline>
}jobFamilyInfo;<newline>
</tt></p>

<p>
The status bits in the status field have the following values:
</p>
<p><tt>
#define JOB_NODE_REQUEST_BUILT  ( 1 << 0) <newline>
#define JOB_PCT_LIST_ALLOCATED  ( 1 << 1) <newline>
#define JOB_REQUESTED_TO_LOAD   ( 1 << 2) <newline>
#define JOB_GOT_OK_TO_LOAD      ( 1 << 3) <newline>
#define JOB_APP_STARTED         ( 1 << 4) <newline>
#define JOB_APP_FINISHED        ( 1 << 5) <newline>
#define JOB_APP_MASS_MURDER     ( 1 << 30) <newline>
</tt></p>

<p>
The values for the terminator of a job, provided by the <bf/CplantFamilyTermination/ query, are:
</p>
<p><tt>
#define PCT_TERMINATOR_UNSET (0)   /* job hasn't terminated */ <newline>
#define PCT_NO_TERMINATOR    (1)   /* job was not terminated from the outside */ <newline>
#define PCT_JOB_OWNER        (2)   /* job was terminated because owner interrupted it */ <newline>
#define PCT_ADMINISTRATOR    (3)   /* job was terminated because sys admin interrupted it */ <newline>
</tt></p>

<p>
The values for status of an inter-job barrier are:
</p>
<p><tt>
#define SYNC_COMPLETED   1  <newline>
#define SYNC_IN_PROGRESS 0 <newline>
#define SYNC_ERROR      (-1) <newline>
</tt></p>

</manpage>
