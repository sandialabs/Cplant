<!--
  $Id: CplantSpawnJob.sgml,v 1.1 2001/11/24 23:23:18 lafisk Exp $
-->

<!doctype qwertz system>

<manpage title="SPAWNJOB" sectnum="3" date='"20 November 2001"'
    footer='"CPLANT MANPAGE"' main='"Cplant Runtime Libraries"'>


<sect1> NAME
    <p>
CplantSpawnJob, CplantSpawnJobGrp
    </p>


<sect1> SYNOPSIS
    <p>
    <bf/#include &lt;cplant.h>/
    </p>
    <p>
    <bf/jobFamilyInfo *CplantSpawnJob(int /<it/nlines/<bf/, char **/<it/pnames/<bf/, char ***/<it/argvs/<bf/, int */<it/nnodes/<bf/, int */<it/nprocs/<bf/)/

    <bf/jobFamilyInfo *CplantSpawnJobGrp(int /<it/nlines/<bf/, char **/<it/pnames/<bf/, char ***/<it/argvs/<bf/, int */<it/nnodes/<bf/, int */<it/nprocs/<bf/, int /<it/nMembers/<bf/, int */<it/rankList/<bf/, int /<it/tmout/<bf/)/
    </p>

<sect1> DESCRIPTION
    <p>
    The function <bf/CplantSpawnJob/ sends a request to <bf/yod2/ to start
    another Cplant application.  <bf/yod2/ requests nodes for the new application
    and contacts the <bf/PCT/s on the allocated nodes.  If the <bf/PCT/s are
    ready to load the new job, <bf/yod2/ loads the job.  The structure returned
    by <bf/yod2/ contains
    a status indicating whether it succeeded in loading the job, or whether
    it is still waiting for the <bf/PCT/s to load the job.  (A <bf/PCT/ may
    have to kill off a cycle-stealing job before it can load the new
    application.  This can take as long as 5 minutes.  Repeat calls to
    <bf/CplantFamilyStatus/ to determine when the load has completed.)
    </p>
    <p>
    The arguments specify <it/nlines/ distinct command lines for the new job.
    The executable path names are specified in the <it/pnames/ array.  If
    <it/pnames/ is NULL, <bf/yod2/ will use the executable path name of the
    spawning application for each command line.  If there is more than one
    distinct command line, and <it/pnames&lsqb;0&rsqb;/ is defined, and <it/pnames&lsqb;1&rsqb;/
    is NULL, the executable names in <it/pnames&lsqb;0&rsqb;/ will be used for each
    command line.
    </p>
    <p>
    The program arguments for each command line may be specified in
    the <it/argv/ array.  Each list of arguments should be followed by a NULL
    pointer, in traditional <bf/argv/ fashion.  If <it/argv/ is NULL, <bf/yod2/
    will issue each command line with no arguments.  If <it/argv/ is defined,
    and any of the <it/argv&lsqb;i&rsqb;/ arrays is a NULL array, <bf/yod2/ will assume
    there are no program arguments for that command line.
    </p>
    <p>
    The <it/nnodes/ array lists the number of nodes desired for each command
    line.  If <it/nnodes/ is NULL, <bf/yod2/ will start each command line on
    one node.  If there is more than one command line, and <it/nnodes&lsqb;1&rsqb;/ has
    the value <bf/-1/, <bf/yod2/ will start each command line on the number
    of nodes specified in <it/nnodes&lsqb;0&rsqb;/.
    </p>
    <p>
    The <it/nprocs/ array lists the number of processes per node desired 
     for each command line.  If <it/nprocs/ is NULL, <bf/yod2/ will 
     specify one process per node for each command line.
     If there is more than one command line, and <it/nprocs&lsqb;1&rsqb;/ has
    the value <bf/-1/, <bf/yod2/ will use the value specified by <it/nprocs&lsqb;0&rsqb;/
     for each command line.
    </p>
    <p>
    The function <bf/CplantSpawnJobGrp/ is a collective job spawning call.
    Every process in the spawning application that participates in the
    spawning operation must make the call with the same list of participants.
    <it/nMembers/ is the number of processes participating in the call,
    <it/rankList/ is the list of participating process ranks, and <it/tmout/
    is the number of seconds to wait before judging a collective operation
    among the pariticpants to be a failure.  In our implementation of this
    call, the first process in the <it/rankList/ makes the request to <bf/yod2/
    and broadcasts the results to the others.
    </p>
    <p>
    If <it/nMembers/ is zero, or <it/rankList/ is NULL, then this is taken
    to mean that all processes in the spawning application are participating.
    </p>
    

<sect1> RETURN VALUE
    <p>
     Both functions return a NULL pointer on error.  On success, a pointer
     to a <bf/jobFamilyInfo/ structure is returned.  This pointer must be
     saved for future calls that relate to the newly created application.
     The pointer may be freed when the caller is done with it.
    </p>
    <p><tt>
typedef struct _jobFamilyInfo{    <newline>
   int job_id;      /* Cplant job id */    <newline>
   int yodHandle;   /* yod2 needs this */  <newline>
   int status;      /* bit map of JOB_* values */    <newline>
   int nprocs ;     /* number of processes*/<newline>
   int error;       /* normally 0, -1 if an error occurred */<newline>
   void *callerHandle;  /* caller can use this, we don't */    <newline>
}<bf/jobFamilyInfo/;    <newline>
    </tt></p>
    <p><tt>
#define JOB_NODE_REQUEST_BUILT  ( 1 << 0) <newline>
#define JOB_PCT_LIST_ALLOCATED  ( 1 << 1) <newline>
#define JOB_REQUESTED_TO_LOAD   ( 1 << 2) <newline>
#define JOB_GOT_OK_TO_LOAD      ( 1 << 3) <newline>
#define JOB_APP_STARTED         ( 1 << 4) <newline>
#define JOB_APP_FINISHED        ( 1 << 5) <newline>
#define JOB_APP_MASS_MURDER     ( 1 << 30) <newline>
    </tt></p>

<sect1> BUGS
    <p>
    At the time this library was written, SMP mode for Cplant was
    still under development.  Hence the <it/nprocs/ request is sent
    along to <bf/yod2/, but nothing is done with it at this point.
    All applications are loaded with one process per node.
    </p>

<sect1> SEE ALSO
    <p>
    <bf/yod2/
    <bf/PCT/
    <bf/CplantFamilyStatus/
    </p>

</manpage>
