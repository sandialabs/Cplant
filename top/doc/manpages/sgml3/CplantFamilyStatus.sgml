<!--
  $Id: CplantFamilyStatus.sgml,v 1.1 2001/11/24 23:23:16 lafisk Exp $
-->

<!doctype qwertz system>

<manpage title="FAMILYSTATUS" sectnum="3" date='"20 November 2001"'
    footer='"CPLANT MANPAGE"' main='"Cplant Runtime Libraries"'>


<sect1> NAME
    <p>
CplantFamilyStatus, CplantFamilyStatusGrp
    </p>


<sect1> SYNOPSIS
    <p>
    <bf/#include &lt;cplant.h>/
    </p>
    <p>
    <bf/int CplantFamilyStatus(jobFamilyInfo */<it/job/<bf/)

    <bf/int CplantFamilyStatusGrp(jobFamilyInfo */<it/job/<bf/, int /<it/nMembers/<bf/, int */<it/rankList/<bf/, int /<it/tmout/<bf/)/
    </p>

<sect1> DESCRIPTION
    <p>
    The function <bf/CplantFamilyStatus/ sends a request to <bf/yod2/
    for the current status of the job specified by <it/job/.  <it/job/
    is a handle returned by <bf/CplantSpawnJob/, <bf/CplantMyParent/
    or <bf/CplantMySelf/.  It is a pointer to a structure that contains 
    a status field and an error indicator,
    and these field are updated when the call returns.
    </p>
    <p>
    The function <bf/CplantFamilyStatusGrp/ is a collective job status call.
    Every process that participates in the
    status request operation must make the call with the same list of participants.
    <it/nMembers/ is the number of processes participating in the call,
    <it/rankList/ is the list of participating process ranks, and <it/tmout/
    is the number of seconds to wait before judging a collective operation
    among the pariticpants to be a failure.  In our implementation of this
    call, the first process in the <it/rankList/ makes the request to <bf/yod2/
    and broadcasts the results to the others.
    </p>
    <p>
    If <it/nMembers/ is zero, or <it/rankList/ is NULL, then this is taken
    to mean that all processes in the application are participating.
    </p>
    

<sect1> RETURN VALUE
    <p>
     Both functions return -1 on error, and 0 on success.  On success,
     the fields in the <it/job/ structure are updated.  This is the
     <bf/jobFamilyInfo/ structure:
    </p>
    <p><tt>
typedef struct _jobFamilyInfo{    <newline>
   int job_id;      /* Cplant job id */    <newline>
   int yodHandle;   /* yod2 needs this */  <newline>
   int status;      /* bit map of JOB_* values */    <newline>
   int nprocs ;     /* number of processes*/<newline>
   int error;       /* normally 0, -1 if an error occurred */<newline>
   void *callerHandle;  /* caller can use this, we don't */    <newline>
}<bf/jobFamilyInfo/;    <newline>
    </tt></p>
    <p><tt>
#define JOB_NODE_REQUEST_BUILT  ( 1 << 0) <newline>
#define JOB_PCT_LIST_ALLOCATED  ( 1 << 1) <newline>
#define JOB_REQUESTED_TO_LOAD   ( 1 << 2) <newline>
#define JOB_GOT_OK_TO_LOAD      ( 1 << 3) <newline>
#define JOB_APP_STARTED         ( 1 << 4) <newline>
#define JOB_APP_FINISHED        ( 1 << 5) <newline>
#define JOB_APP_MASS_MURDER     ( 1 << 30) <newline>
    </tt></p>

<sect1> SEE ALSO
    <p>
    <bf/yod2/
    <bf/CplantSpawnJob/
    <bf/CplantMyParent/
    <bf/CplantMySelf/
    </p>

</manpage>
