extern int ii,iii;
/*
Copyright (c) 1993 Sandia National Laboratories
 
  Redistribution and use in source and binary forms are permitted
  provided that source distributions retain this entire copyright
  notice.  Neither the name of Sandia National Laboratories nor
  the name of the author may be used to endorse or promote products
  derived from this software without specific prior written permission.
 
Warranty:
  This software is provided "as is" and without any express or
  implied warranties, including, without limitation, the implied
  warranties of merchantability and fitness for a particular
  purpose.

The README file contains addition information
*/

#include <math.h>
#include <stdio.h>
#ifdef OSF
#   include <nx.h>
#endif
#ifdef MPI
#   include <mpi.h>
#endif
#include "defines.h"
#include "BLAS_prototypes.h"
/*  #include "head1.h"   */   
#include "factor.h"
#include "macros.h"
#include "pcomm.h"

extern int me;	               /* processor id information */
extern int nprocs_row;         /* num of procs to which a row is assigned */
extern int nprocs_col;         /* num of procs to which a col is assigned */
extern int nrows_matrix;       /* number of rows in the matrix */
extern int ncols_matrix;       /* number of cols in the matrix */
extern BLAS_INT my_rows;            /* num of rows I own */
extern BLAS_INT my_cols;            /* num of cols I own */
extern BLAS_INT my_rhs;             /* num of right hand side I own */

extern DATA_TYPE *col1;           /* ptrs to col used for updating a col */
extern DATA_TYPE *row1;           /* ptr to diagonal row */
extern DATA_TYPE *row2;           /* ptr to pivot row */
extern DATA_TYPE *row3;           /* ptr to temporary vector for rows */
extern int *pivot_vec;         /* ptr to vector storing list of pivot rows */
extern BLAS_INT mat_stride,col1_stride,row1_stride;  /* strides for 2nd dim of 2d mats */

extern BLAS_INT blksz;              /* block size for BLAS 3 operations */
extern int ringnext,ringprev,ringnex2,ringpre2,ringnex3,ringpre3,ringnex4,ringpre4;
#define LUSTATUSINT 64

#ifdef MPI
extern MPI_Comm col_comm;
extern double MPI_Wtime( );
#endif

#define LUPIVOTTYPE (1<<19)
#define LUCOLTYPE (1<<20)
#define LUROWTYPE (1<<21)
#define LUPIVROWTYPE ((1<<21) + (1<<20))
#define LUSENDTYPE (1<<22)

#define rowplus(I) proc_num(mesh_row(me),(mesh_col(me)+(I) < nprocs_row) ? mesh_col(me)+(I) : mesh_col(me)+(I)-nprocs_row)
#define rowminus(I) rowplus(nprocs_row - (I))
#define MAXDIST 1

#ifdef DEBUG_COMM
#include "mpiDebug.h"
#elif MPI_ERR_CHECK
#include "mpiDebug.h"
#endif

#define SEG(p,n) \
printf("seg %d\n",n);\
for (ii=0; ii<4; ii++){\
for (iii=0; iii<4; iii++){\
    printf("%f ",p[(ii*4)+iii]);\
}\
printf("\n");\
}\
printf("\n");

void
factor(DATA_TYPE *seg)
{ int j,k;                        /* loop counter */

  struct pivot_type {           /* a stucture for storing pivot info */
    DATA_TYPE entry;            /*   pivot entry */
    DATA_TYPE current;          /*   current row entry */
    int row;                    /*   pivot row number */
  } pivot, tpivot;              /* pivot info and some temporary pivot infor */
  
  DATA_TYPE d_zero = CONST_ZERO;/* constant for initializations */
  BLAS_INT one = 1;                  /* constant for the daxpy routines */
  DATA_TYPE d_one = CONST_ONE;  /* constant for the daxpy routines */
  BLAS_INT zero = 0;                 /* constant for the daxpy routines */
  BLAS_INT min_one = -1;             /* constant for the daxpy routines */
  DATA_TYPE d_min_one = CONST_MINUS_ONE; /* constant for the daxpy routines */
  char transA = 'N';            /* all dgemm's don't transpose matrix A  */
  char transB = 'N';            /* nor transpose matrix B */
  BLAS_INT colcnt,cols_in_blk_owned; /* number of columns stored for BLAS 3 ops */
  int c_owner,r_owner,pivot_owner;
  BLAS_INT col_len, row_len,length,rows_used,cols_used;
  int row_size;
  int rel_lpivot_row,lpivot_row,*sav_pivot_ptr;
  int temp,itmp,jtmp,flag;
  double pivot_mag;
  double mflops;
  DATA_TYPE invpiv;
  DATA_TYPE *cur_col_ptr,*cur_row_ptr,*update_ptr,*piv_row_ptr;
  DATA_TYPE *sav_col_ptr,*sav_row_ptr,*sav_piv_row_ptr;
  DATA_TYPE *cur_col1_row_ptr,*piv_col1_row_ptr;
  DATA_TYPE *temp_row_ptr;
  DATA_TYPE *act_col_ptr,*act_row_ptr,*act_cur_row_ptr,*act_piv_row_ptr;
  int gpivot_row; /* make sure that this is well aligned */

  int dest,ringdist,rdist;
  long type,bytes,msgid;

  MPI_Request msgrequest;
  MPI_Status msgstatus;
  struct {
    double  val;
    int proc;
  } pivot_in,pivot_out;
  DATA_TYPE entry,current;
  int row;

  int i1, j1, k1;
  DATA_TYPE *p1,*p1c,*p1r;
  double temp1;
#ifdef TIMING0
  extern double MPI_Wtime();
  double updatetime,colupdtime,rowupdtime,scaltime;
  double xpivmsgtime,bcastpivstime,bcastpivrtime;
  double bcastcolstime,bcastcolrtime,bcastcolwtime,bcastrowtime;
  double sendrowtime,recvrowtime;
  double copycoltime,copyrowtime,copyrow1time,copypivrowtime,copypivrow1time;
  double t1,t2,update_s;
  double msgtime,copytime,dgemmtime,totaltime;
#endif
  colcnt = 0;           /* number of column's currently saved for update */
  col_len = my_rows;    /* length of column in remaining local matrix */
  cur_col_ptr = seg;    /* location of first column in remaining local matrix */
  sav_col_ptr = col1;   /* location to store next active column */
  act_col_ptr = col1;   /* location of matrix of columns being saved for dgemm update */

  row_len = my_cols + my_rhs;  /* length of row in local matrix including rhs's*/
  rows_used = 0;      /* haven't used any local rows yet */
  cols_used = 0;
  cur_row_ptr = seg;  /* location of first row in local matrix */
  cur_col1_row_ptr = col1;  /* location of first row in col1 matrix */
  act_row_ptr = row1; /* location of matrix of rows being saved for dgemm update */
  sav_piv_row_ptr = row1; /* location for next row being saved for dgemm update */
  temp_row_ptr = row3;
  sav_row_ptr = row2;
  sav_pivot_ptr = pivot_vec; /* location to store name of pivot row */
  update_ptr = seg;     /* location of remaining local matrix */
#ifdef TIMING0
  xpivmsgtime=bcastpivstime=bcastpivrtime=bcastcolstime=0.;
  bcastcolrtime=bcastcolwtime=bcastrowtime=0.;
  sendrowtime=0.;
  recvrowtime=0.0;
  copycoltime=copyrowtime=copyrow1time=copypivrowtime=copypivrow1time=0.0;
  updatetime=colupdtime=rowupdtime=scaltime=0.0;
  t2=t1=0.;
#endif
  /* printf("Block size in factor %d  \n",blksz); */
#ifdef TIMING0
      t2 = MPI_Wtime();
#endif
  for (j=0; j<ncols_matrix; j++) {
/*
    printf("Starting column j = %d on me %d \n",j,me);   
*/

    c_owner = col_owner(j); r_owner = row_owner(j);
    ringdist = mesh_col(me) - mesh_col(c_owner);
    if (ringdist < 0) ringdist += nprocs_row;
    if (me == c_owner) {
      if (col_len > 0) {

#ifndef OVERLAP	
	if (colcnt != 0){ /* update current column with saved columns */

          XGEMM_(&transA, &transB,
                 &col_len, &one, &colcnt, &d_min_one,
                 act_col_ptr, &col1_stride,
                 act_row_ptr, &blksz, &d_one,
                 cur_col_ptr, &mat_stride);

	}
#endif
	/* find maximum local pivot */

        pivot.entry = *(cur_col_ptr);

/*
SEG(seg,1);
printf("idamax(%d, %p, %d), (element %d, %f)\n",
col_len, cur_col_ptr, one, (long)(cur_col_ptr-seg),
*(cur_col_ptr));
*/

#define F2C_BLAS

#ifdef F2C_BLAS
       /*
       ** but this gives max in the COLUMN, not in the ROW, for
       ** symmetric matrix this does not seem to be a problem.
       */
        rel_lpivot_row = IXAMAX(col_len, cur_col_ptr, one)-1;
#elif CBLAS 
	rel_lpivot_row = IXAMAX(col_len, cur_col_ptr, one);
#else
    /*   Shift for the fortran to C array definitions   */
        rel_lpivot_row = IXAMAX(col_len, cur_col_ptr, one)-1;
#endif

/*
        printf("Node %d: relative pivot row %d column %d \n",me,rel_lpivot_row,j);  
*/
	pivot.entry = *(cur_col_ptr + rel_lpivot_row);
	pivot.row = lrow_to_grow(rows_used+rel_lpivot_row);
	if (me == r_owner) 
          pivot.current = *(cur_col_ptr);  
        else 
          pivot.current = d_zero;

      } else {
	pivot.row = 0;  pivot.entry = d_zero;  pivot.current = d_zero;
      }
      /* exchange pivot entries to determine max. global pivot*/


       entry = pivot.entry;
       row = pivot.row;
       current = pivot.current;
       pivot_in.val = ABS_VAL(pivot.entry);
       pivot_in.proc = me;
       bytes = sizeof(DATA_TYPE);

#ifdef DEBUG_COMM
#ifdef DEBUG_ALLREDUCE
PRINTF("1 factor: MPI_Allreduce\n");
#endif
#endif

#ifdef MPI_ERR_CHECK
       mrc = MPI_Allreduce(&pivot_in,&pivot_out,1,MPI_DOUBLE_INT,MPI_MAXLOC,col_comm);
       TEST_MRC(101)
#else
       MPI_Allreduce(&pivot_in,&pivot_out,1,MPI_DOUBLE_INT,MPI_MAXLOC,col_comm);
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_ALLREDUCE
PRINTF("factor: DONE MPI_Allreduce\n");
#endif
#ifdef DEBUG_BCAST
PRINTF("2 factor: MPI_Bcast among column, current %d bytes\n",bytes);
#endif
#endif

#ifdef MPI_ERR_CHECK
       mrc=MPI_Bcast(&current,bytes,MPI_BYTE,mesh_row(r_owner),col_comm);
       TEST_MRC(102)
#else
       MPI_Bcast(&current,bytes,MPI_BYTE,mesh_row(r_owner),col_comm);
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_BCAST
PRINTF("factor: DONE MPI_Bcast\n");
PRINTF("3 factor: MPI_Bcast among column, row , 1 int\n");
#endif
#endif
       pivot.current = current;
#ifdef MPI_ERR_CHECK
       mrc = MPI_Bcast(&row,1,MPI_INT,mesh_row(pivot_out.proc),col_comm);
       TEST_MRC(103)
#else
       MPI_Bcast(&row,1,MPI_INT,mesh_row(pivot_out.proc),col_comm);
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_BCAST
PRINTF("factor: DONE MPI_Bcast\n");
PRINTF("(%d) 4 factor: MPI_Bcast among column, j= %d, entry, %d bytes\n",
            me,j,bytes);
#endif
#endif
       pivot.row = row;
#ifdef MPI_ERR_CHECK
       mrc=MPI_Bcast(&entry,bytes,MPI_BYTE,mesh_row(pivot_out.proc),col_comm);

if (mrc!=MPI_SUCCESS)

printf("(%d) j=%d of %d, MPI_Bcast(%p, %d, MPI_BYTE, %d, col_comm)\n",
            me,j,ncols_matrix,&entry,bytes,mesh_row(pivot_out.proc));

       TEST_MRC(104)
#else
       MPI_Bcast(&entry,bytes,MPI_BYTE,mesh_row(pivot_out.proc),col_comm);
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_BCAST
PRINTF("factor: DONE MPI_Bcast\n");
#endif
#endif
       pivot.entry = entry;  

      *sav_pivot_ptr = pivot.row;
      gpivot_row = pivot.row;
      pivot_mag = ABS_VAL(pivot.entry);

      if (pivot_mag == 0.0) {
        printf("Node %d error -- zero pivot found in column %d -- exiting\n",me,j);
        exit(0);
      }
      /* divide everything including the diagonal by the pivot entry. */
      INVERSE(pivot.entry,pivot_mag,invpiv);

      XSCAL(col_len, invpiv, cur_col_ptr, one);

      /* restore the pivot entry */
      /* swap pivot and current row in current column */
      if (me == row_owner(gpivot_row)){
        MULTIPLY(pivot.current, invpiv, *(cur_col_ptr+rel_lpivot_row));
      }
      if (me == r_owner)  {
        *(cur_col_ptr) = pivot.entry;
      }

      XCOPY(col_len, cur_col_ptr, one, sav_col_ptr, one);
#ifdef TIMING0
      t1=MPI_Wtime();
#endif

      /* send column and pivot down one's row */
      for (rdist = 1;rdist <= MAXDIST;rdist++){
	if (rowplus(rdist) == c_owner) break;
#ifdef OSF 
	csend(LUPIVROWTYPE+j,NULL,0,rowplus(rdist),0);
#endif  

#ifdef MPI
   /*     printf("Sending pivot info  %d %d %d \n",LUPIVROWTYPE+j,me,rowplus(rdist));  */   
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("5 factor: MPI_Send 1 int to %d\n",rowplus(rdist));
#endif
#endif
#ifdef MPI_ERR_CHECK
        mrc=MPI_Send(&gpivot_row,1,MPI_INT,rowplus(rdist),
                 LUPIVROWTYPE+j,MPI_COMM_WORLD);
       TEST_MRC(105)
#else
        MPI_Send(&gpivot_row,1,MPI_INT,rowplus(rdist),
                 LUPIVROWTYPE+j,MPI_COMM_WORLD);
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("factor: DONE MPI_Send\n");
#endif
#endif
#else
/* 	_nsend(NULL, 0, rowplus(rdist), LUPIVROWTYPE+j, NULL, gpivot_row);  */
        bytes=4;
  /*       printf("Sending pivot  %d %d \n",j,me);   */     
/*         _nsend(&gpivot_row, bytes, rowplus(rdist), LUPIVROWTYPE+j, NULL, NULL);  */
           csend(LUPIVROWTYPE+j,&gpivot_row,bytes,rowplus(rdist),0);
#endif

      }
 /*     printf("Sending pivot for column  %d \n",j);     */      
#ifdef TIMING0
      bcastpivstime += (MPI_Wtime()-t1);
#endif
#ifdef TIMING0
      t1 = MPI_Wtime();
#endif
      for (rdist = 1;rdist <= MAXDIST;rdist++){
	if (rowplus(rdist) == c_owner) break;
#ifdef MPI
        bytes=sizeof(DATA_TYPE)*col_len;
 /*       printf("Sending pivot  %d %d %d \n",LUROWTYPE+j,me,rowplus(rdist));
        printf("Sending pivot  %d %d %d \n",LUROWTYPE+j,me,bytes);          */

#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("6 factor: MPI_Send %d bytes to %d\n",bytes,rowplus(rdist));
#endif
#endif

#ifdef MPI_ERR_CHECK
        mrc=MPI_Send(sav_col_ptr,bytes,MPI_BYTE,
                 rowplus(rdist),LUROWTYPE+j,MPI_COMM_WORLD);
       TEST_MRC(106)
#else
        MPI_Send(sav_col_ptr,bytes,MPI_BYTE,
                 rowplus(rdist),LUROWTYPE+j,MPI_COMM_WORLD);
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("factor: DONE MPI_Send\n");
#endif
#endif

#else
/*        printf("Sending pivot  %d from  %d to  %d \n",LUROWTYPE+j,me,rowplus(rdist));   
        printf("Sending pivot  %d %d size- %d \n",LUROWTYPE+j,me,col_len*sizeof(DATA_TYPE));    */ 
  /*      send_msg(me,rowplus(rdist),(char *)sav_col_ptr, col_len*sizeof(DATA_TYPE), LUROWTYPE+j);  */

/*    Original SUNMOS version  */ 
	mac_send_msg(rowplus(rdist), (char *)sav_col_ptr, col_len*sizeof(DATA_TYPE), LUROWTYPE+j);  
#endif 
      }
#ifdef TIMING0
      bcastcolstime += (MPI_Wtime()-t1);
#endif
      /* if own active column don't include it in row work anymore */
      row_len--;
      update_ptr += mat_stride; cur_col_ptr += mat_stride;
      cur_row_ptr += mat_stride; 
      sav_pivot_ptr++;
      act_row_ptr += blksz;  sav_piv_row_ptr += blksz;
      cols_used++;
    }else{
      /* recv column and pivot */

#ifdef MPI
      bytes=col_len*sizeof(DATA_TYPE);
/*
       printf("Receiving pivot %d %d %d \n",LUROWTYPE+j,me,rowplus(rdist)); 
        printf("Receiving pivot  %d %d %d \n",LUROWTYPE+j,me,bytes);             
*/

#ifdef DEBUG_COMM
#ifdef DEBUG_IRECV
PRINTF("7 factor: MPI_Irecv %d bytes from anyone\n",bytes);
#endif
#endif

#ifdef MPI_ERR_CHECK
      mrc=MPI_Irecv(sav_col_ptr,bytes,MPI_BYTE,
                MPI_ANY_SOURCE,LUROWTYPE+j,MPI_COMM_WORLD,&msgrequest);
       TEST_MRC(107)
#else
      MPI_Irecv(sav_col_ptr,bytes,MPI_BYTE,
                MPI_ANY_SOURCE,LUROWTYPE+j,MPI_COMM_WORLD,&msgrequest);
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_IRECV
PRINTF("factor: DONE MPI_Irecv\n");
#endif
#endif

#else
 /*     printf("synchronous receive %d %d \n",j,me);
      printf("Receiving pivot  %d %d size- %d \n",LUROWTYPE+j,me,col_len*sizeof(DATA_TYPE);      */  
       bytes=col_len*sizeof(DATA_TYPE);
       type=LUROWTYPE+j;
      /*  recv_msg(me,rowplus(rdist),(char *)sav_col_ptr,bytes,type);  */
       msgid = irecv(type,(char *)sav_col_ptr, bytes);  
#endif

 /*     printf("after synchronous receive %d %d \n",j,me);   */ 

#ifdef TIMING0
      t1 = MPI_Wtime();
#endif
      bytes = 0; dest = -1; type = LUPIVROWTYPE+j;
      bytes=4;
#ifdef OSF
      crecv(type, NULL, bytes);
#else
#ifdef MPI
#ifdef DEBUG_COMM
#ifdef DEBUG_RECV
PRINTF("8 factor: MPI_Recv 1 int from anyone\n");
#endif
#endif
#ifdef MPI_ERR_CHECK
      mrc=MPI_Recv(&gpivot_row,1,MPI_INT,MPI_ANY_SOURCE,type,MPI_COMM_WORLD,&msgstatus);
       TEST_MRC(108)
#else
      MPI_Recv(&gpivot_row,1,MPI_INT,MPI_ANY_SOURCE,type,MPI_COMM_WORLD,&msgstatus);
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_RECV
PRINTF("factor: DONE MPI_Recv\n");
#endif
#endif
 /*       printf("Receiving  pivot  info  %d %d  \n",type,me);       */
#else 
      /* _nrecv(NULL, &bytes, &dest, &type, NULL, &gpivot_row);  */
  /*     _nrecv(&gpivot_row, &bytes, &dest, &type, NULL, NULL);   */
         crecv(type,&gpivot_row,bytes);
#endif
#endif  
    /*  printf("Received pivot column %d %d \n",j,me);   */                            
#ifdef TIMING0
      bcastpivrtime += (MPI_Wtime()-t1);
#endif
      /* if necessary forward column and pivot */
      if ((ringdist % MAXDIST) == 0) {
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
	for (rdist = 1;rdist <= MAXDIST;rdist++){
	  if (rowplus(rdist) == c_owner) break;
 /*          printf("Forward  pivot column %d %d \n",j,me);           */
#ifdef OSF
          csend(LUPIVROWTYPE+j,NULL,0,rowplus(rdist),0);
#else 
#ifdef MPI

#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("9 factor: MPI_Send 1 int to %d\n",rowplus(rdist));
#endif
#endif
#ifdef MPI_ERR_CHECK
       mrc= MPI_Send(&gpivot_row,1,MPI_INT,rowplus(rdist),
                  LUPIVROWTYPE+j,MPI_COMM_WORLD);
       TEST_MRC(109)
#else
          MPI_Send(&gpivot_row,1,MPI_INT,rowplus(rdist),
                  LUPIVROWTYPE+j,MPI_COMM_WORLD);
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("factor: DONE MPI_Send\n");
#endif
#endif
#else
	 /*_nsend(NULL, 0, rowplus(rdist), LUPIVROWTYPE+j, NULL, gpivot_row); */
         bytes=4;
 /*         _nsend(&gpivot_row, bytes, rowplus(rdist), LUPIVROWTYPE+j, NULL, NULL);  */
            csend(LUPIVROWTYPE+j,&gpivot_row,bytes,rowplus(rdist),0);
#endif
#endif 
	}
#ifdef TIMING0
	bcastpivstime += (MPI_Wtime()-t1);
#endif
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
#ifdef MPI
#ifdef DEBUG_COMM
#ifdef DEBUG_WAIT
PRINTF("10 factor: MPI_Wait\n");
#endif
#endif
#ifdef MPI_ERR_CHECK
       mrc=MPI_Wait(&msgrequest,&msgstatus);    
       TEST_MRC(110)
#else
       MPI_Wait(&msgrequest,&msgstatus);    
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_WAIT
PRINTF("factor: DONE MPI_Wait\n");
#endif
#endif
#else
       msgwait(msgid); 
#endif
#ifdef TIMING0
	bcastcolrtime += (MPI_Wtime()-t1);
#endif
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
	for (rdist = 1;rdist <= MAXDIST;rdist++){
	  if (rowplus(rdist) == c_owner) break;
#ifdef MPI
          bytes=col_len*sizeof(DATA_TYPE);
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("11 factor: MPI_Send %d bytes to %d\n",bytes,rowplus(rdist));
#endif
#endif
          MPI_Send(sav_col_ptr,bytes,MPI_BYTE,
                   rowplus(rdist),LUROWTYPE+j,MPI_COMM_WORLD);
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("factor: DONE MPI_Send\n");
#endif
#endif
#else
   /*       send_msg(me,rowplus(rdist), (char *)sav_col_ptr, col_len*sizeof(DATA_TYPE), LUROWTYPE+j);  */
/*   Original SUNMOS Version   */
	  mac_send_msg(rowplus(rdist), (char *)sav_col_ptr, col_len*sizeof(DATA_TYPE), LUROWTYPE+j); 
#endif
	}
#ifdef TIMING0
	bcastcolstime += (MPI_Wtime()-t1);
#endif
      }
    }
    pivot_owner = row_owner(gpivot_row); lpivot_row = grow_to_lrow(gpivot_row);
    act_cur_row_ptr = col1 + rows_used;  act_piv_row_ptr = col1 + lpivot_row;
    piv_row_ptr = cur_col_ptr + (lpivot_row - rows_used);
    piv_col1_row_ptr = act_col_ptr + (lpivot_row - rows_used);
    row_size = (row_len + colcnt)*sizeof(DATA_TYPE);

    /* send current row to owner of pivot row, skip this if pivot row is current row */
    if (gpivot_row != j){
      if (me == r_owner){ /* own current row so pack it up*/
	/* first take current row then portion in stored active columns */
	/* stored portion is at act_cur_row_ptr with col1's stride */
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
	/* copy from matrix and col1 */
        XCOPY(row_len, cur_row_ptr, mat_stride, sav_row_ptr, one);
        XCOPY(colcnt, cur_col1_row_ptr, col1_stride, sav_row_ptr+row_len, one);
#ifdef TIMING0
 copyrowtime += (MPI_Wtime()-t1);
#endif
        if (me != pivot_owner) 
	  {
#ifdef TIMING0
	    t1 = MPI_Wtime();
#endif
#ifdef MPI
            bytes=(row_len+colcnt)*sizeof(DATA_TYPE);
   /*         printf("sending pivot %d %d %d \n",LUSENDTYPE+j,me,pivot_owner);
            printf("Sending  pivot  %d %d %d \n",LUSENDTYPE+j,me,bytes);          */
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("12 factor: MPI_Send %d bytes to %d\n",bytes,pivot_owner);
#endif
#endif
#ifdef MPI_ERR_CHECK
        mrc=    MPI_Send(sav_row_ptr,bytes,MPI_BYTE,pivot_owner,
                     LUSENDTYPE+j,MPI_COMM_WORLD);
       TEST_MRC(111)
#else
            MPI_Send(sav_row_ptr,bytes,MPI_BYTE,pivot_owner,
                     LUSENDTYPE+j,MPI_COMM_WORLD);
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_SEND
PRINTF("factor: DONE MPI_Send\n");
#endif
#endif
#else
  /*          send_msg(me,pivot_owner, (char *)sav_row_ptr, row_size, LUSENDTYPE+j);   */
/*   Original  SUNMOS Version   */
        /*   printf("Sending  pivot to  %d from  %d %d \n",pivot_owner,me,row_size);   */
	    mac_send_msg(pivot_owner, (char *)sav_row_ptr, row_size, LUSENDTYPE+j);
   /*        printf("Finished Sending  pivot to  %d from  %d %d \n",pivot_owner,me,row_size);   */  
#endif
#ifdef TIMING0
	    sendrowtime += (MPI_Wtime()-t1);
#endif
	  }
      }
    }
    /* update pivot row and save in active row matrix */
    if (me == pivot_owner){
      if (colcnt > 0) {
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
#ifdef OVERLAP
	/* don't need to update columns which were already updated */
	cols_in_blk_owned = 0;
	for (k = 1; k < (blksz - colcnt); k++)
	  if (j+k < ncols_matrix)
	    if (me == col_owner(j+k)) cols_in_blk_owned++;
	length = row_len - cols_in_blk_owned;
	if (length > 0)
          XGEMM_(&transA, &transB, &one, &length, &colcnt, &d_min_one,
                 act_piv_row_ptr, &col1_stride,
                 act_row_ptr+(cols_in_blk_owned*blksz), &blksz, &d_one,
                 piv_row_ptr+(cols_in_blk_owned*mat_stride), &mat_stride);
#else
          XGEMM_(&transA, &transB, &one, &length, &colcnt, &d_min_one,
                 act_piv_row_ptr, &col1_stride,
                 act_row_ptr+(cols_in_blk_owned*blksz), &blksz, &d_one,
                 piv_row_ptr+(cols_in_blk_owned*mat_stride), &mat_stride);
#endif	
#ifdef TIMING0
	rowupdtime += (MPI_Wtime()-t1);
#endif
      }
      /* copy pivot row to temp holder */
#ifdef TIMING0
      t1 = MPI_Wtime();
#endif

	/* copy from matrix and col1 */
      XCOPY(row_len, piv_row_ptr, mat_stride, temp_row_ptr, one);
      XCOPY(colcnt, piv_col1_row_ptr, col1_stride, temp_row_ptr+row_len, one);

#ifdef TIMING0
      copypivrowtime += (MPI_Wtime()-t1);
#endif
    }
    /* broadcast pivot row */
#ifdef TIMING0
    t1 = MPI_Wtime();
#endif

#ifdef MPI
      bytes=sizeof(DATA_TYPE)*row_size ;
 /*   MPI_Bcast(&temp_row_ptr, bytes, MPI_BYTE, mesh_row(pivot_owner), col_comm);      */

#ifdef DEBUG_COMM
#ifdef DEBUG_BCAST
PRINTF("13 factor: MPI_Bcast %d\n",row_size);
#endif
#endif

#ifdef MPI_ERR_CHECK
    mrc=MPI_Bcast((char *) temp_row_ptr, row_size, MPI_CHAR, mesh_row(pivot_owner), col_comm);   
       TEST_MRC(112)
#else
    MPI_Bcast((char *) temp_row_ptr, row_size, MPI_CHAR, mesh_row(pivot_owner), col_comm);   
#endif

#ifdef DEBUG_COMM
#ifdef DEBUG_BCAST
PRINTF("factor: DONE MPI_Bcast\n");
#endif
#endif

#else
 /*       printf("Sending pivot  %d from  %d to  %d  for column %d\n",LUCOLTYPE+j,me,pivot_owner,j);   */
    bcast_col(me, pivot_owner, (char *)temp_row_ptr, row_size, LUCOLTYPE+j);
  /*      printf("Finished Sending pivot  %d from  %d to  %d  for column %d\n",LUCOLTYPE+j,me,pivot_owner,j);   */
#endif
      
#ifdef TIMING0
    bcastrowtime += (MPI_Wtime()-t1);
#endif

#ifdef TIMING0
    t1 = MPI_Wtime();
#endif

    XCOPY(row_len, temp_row_ptr, one, sav_piv_row_ptr, blksz);

#ifdef TIMING0
    copypivrowtime += (MPI_Wtime()-t1);
#endif
/*    printf(" Before pivot row work global pivot row  %d  me=%d  row %d \n",gpivot_row,me,j);    */
    if (gpivot_row != j){
      if (me == pivot_owner){
	/* receive top row and copy into pivot row */
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
	if (me != r_owner) {
#ifdef MPI
          bytes=(row_len+colcnt)*sizeof(DATA_TYPE);
 /*           printf("Receiving pivot %d %d %d \n",lUSENDTYPE+j,me,pivot_owner);

#ifdef DEBUG_COMM
#ifdef DEBUG_RECV
PRINTF("14 factor: MPI_Recv %d from %d\n",bytes,r_owner);
#endif
#endif
            printf("Receiving pivot  %d %d %d \n",LUSENDTYPE+j,me,bytes);        */
#ifdef MPI_ERR_CHECK
        mrc=MPI_Recv(sav_row_ptr,bytes,MPI_BYTE,r_owner,
                   LUSENDTYPE+j,MPI_COMM_WORLD,&msgstatus);
       TEST_MRC(113)
#else
          MPI_Recv(sav_row_ptr,bytes,MPI_BYTE,r_owner,
                   LUSENDTYPE+j,MPI_COMM_WORLD,&msgstatus);
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_RECV
PRINTF("factor: DONE MPI_Recv\n");
#endif
#endif
 /*           printf("Receiving pivot %d %d %d \n",LUSENDTYPE+j,me,pivot_owner);
            printf("Receiving pivot  %d %d %d \n",LUSENDTYPE+j,me,bytes);         */
#else
          bytes=(row_len+colcnt)*sizeof(DATA_TYPE);
/*          printf(" Before Receiving pivot row owner %d  me %d %d row %d \n",r_owner,me,bytes,j); */
          recv_msg(me, r_owner, (char *)sav_row_ptr, bytes, LUSENDTYPE+j);
  /*        printf("After Receiving pivot row owner %d me %d %d row %d \n",r_owner,me,row_size,j);  */
#endif   
       }
#ifdef TIMING0
	recvrowtime += (MPI_Wtime()-t1);
#endif
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
	/* copy from matrix and col1 */
	XCOPY(row_len, sav_row_ptr, one, piv_row_ptr, mat_stride);
	XCOPY(colcnt, sav_row_ptr+row_len, one, piv_col1_row_ptr, col1_stride);
#ifdef TIMING0
	copyrow1time += (MPI_Wtime()-t1);
#endif
      }
      if (me == r_owner) { /* copy pivot row into current row */
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif

	/* copy from matrix and col1 */
        XCOPY(row_len, temp_row_ptr, one, cur_row_ptr, mat_stride);
        XCOPY(colcnt, temp_row_ptr+row_len, one, cur_col1_row_ptr, col1_stride);

#ifdef TIMING0
	copypivrow1time += (MPI_Wtime()-t1);
#endif
      }
    }
/*    printf(" After pivot row work global pivot row  %d  me=%d  row %d \n",gpivot_row,me,j);   */
    if ((me != c_owner) && ((ringdist % MAXDIST) != 0)) {
#ifdef TIMING0
      t1 = MPI_Wtime();
#endif
#ifdef MPI
#ifdef DEBUG_COMM
#ifdef DEBUG_WAIT
PRINTF("15 factor: MPI_Wait\n");
#endif
#endif
#ifdef MPI_ERR_CHECK
      mrc=MPI_Wait(&msgrequest,&msgstatus);
       TEST_MRC(114)
#else
      MPI_Wait(&msgrequest,&msgstatus);
#endif
#ifdef DEBUG_COMM
#ifdef DEBUG_WAIT
PRINTF("factor: DONE MPI_Wait\n");
#endif
#endif
#else
      msgwait(msgid);  
#endif
#ifdef TIMING0
      bcastcolrtime += (MPI_Wtime()-t1);
#endif
    }
    /* saved this active row and column so get ready for next ones */
    if (me == r_owner) { /* finished with this row so update all column pointers */
      col_len--; rows_used++; update_ptr++; cur_row_ptr++; cur_col1_row_ptr++;
      cur_col_ptr++; sav_col_ptr++;  act_col_ptr++;
    }
    colcnt++;

#ifdef OVERLAP
    cols_in_blk_owned = 0;
    for (k = 1; k <= (blksz - colcnt); k++)
      if (j+k < ncols_matrix)
	if (me == col_owner(j+k)) cols_in_blk_owned++;
    if (cols_in_blk_owned > 0){ /* update current column with latest column */
#ifdef TIMING0
      t1 = MPI_Wtime();
#endif
      XGEMM_(&transA, &transB,
             &col_len, &cols_in_blk_owned, &one, &d_min_one,
             sav_col_ptr, &col1_stride,
             sav_piv_row_ptr, &blksz, &d_one,
             cur_col_ptr, &mat_stride);
      
#ifdef TIMING0
      colupdtime += (MPI_Wtime()-t1);
#endif
    }
#endif

    sav_col_ptr += col1_stride;
    sav_piv_row_ptr++;

    /* if we have saved up enough columns, we do the outer product update. */
    if (colcnt == blksz)
      if (j != ncols_matrix-1){
#ifdef TIMING0
	t1 = MPI_Wtime();
#endif
#ifndef TURBO
/*    printf("Column length %d, Row length %d, Column Count %d \n",col_len,row_len,colcnt);    */

        XGEMM_(&transA, &transB, &col_len, &row_len, &colcnt, &d_min_one,
               act_col_ptr, &col1_stride, act_row_ptr, &blksz, &d_one,
               update_ptr, &mat_stride);
#else
	XMM_(&transA, &transB, &col_len, &row_len, &colcnt, &d_min_one, 
	       act_col_ptr, &col1_stride, act_row_ptr, &blksz, &d_one,
	       update_ptr, &mat_stride);
#endif
#ifdef TIMING0
	updatetime += (MPI_Wtime()-t1);
 /*       update_s = (MPI_Wtime()-t1);
        if(update_s != 0. ) {
         mflops = 2*col_len*row_len*colcnt/update_s/1000000.;
        } */
#endif
        /*       printf(" m %d  ,  n   %d ,  k %d,  index j = %d,  mflops %e \n",col_len,row_len
           ,colcnt,j,mflops);
    */ 
	/* reset active matrix pointers */
	colcnt = 0;
	act_col_ptr = sav_col_ptr = col1 + rows_used;	
	act_row_ptr = sav_piv_row_ptr = row1;
      }
#ifdef PRINT_STATUS
    if (((j%1) == 0) && (me == 0)) {
      fprintf(stderr," Column %d completed\n",j);
    }
#endif
  }
#ifdef TIMING0
  totaltime = MPI_Wtime() - t2;
#endif
#ifdef TIMING0
  msgtime = xpivmsgtime+bcastpivstime+bcastpivrtime+bcastcolstime+bcastcolrtime+bcastrowtime+sendrowtime+recvrowtime;
  copytime = copycoltime+copyrowtime+copyrow1time+copypivrowtime+copypivrow1time;
  dgemmtime = updatetime+colupdtime+rowupdtime+scaltime;
  showtime("Time to xchgpivot",xpivmsgtime);
  showtime("Time to do send in bcast pivot",bcastpivstime);
  showtime("Time to do recv in bcast pivot",bcastpivrtime);
  showtime("Time to do bcast pivot",bcastpivrtime+bcastpivstime);
  showtime("Time to do send in bcast cur col",bcastcolstime);
  showtime("Time to do recv bcast cur col",bcastcolrtime);
  showtime("Time to do bcast cur col",bcastcolrtime+bcastcolstime);
  showtime("Time to do bcast cur col and pivot",bcastcolrtime+bcastcolstime+bcastpivrtime+bcastpivstime);
  showtime("Time to bcast piv row",bcastrowtime);
  showtime("Time to send cur row",sendrowtime);
  showtime("Time to recv cur row",recvrowtime);
  showtime("Total msg passing time",msgtime);
  showtime("Percent msg passing time",100*msgtime/totaltime);
  showtime("Time to copy cur col",copycoltime);
  showtime("Time to copy cur row to sav row",copyrowtime);
  showtime("Time to copy piv row to sav piv",copypivrowtime);
  showtime("Time to copy sav row to cur row",copyrow1time);
  showtime("Time to copy sav piv  to piv row",copypivrow1time);
  showtime("Total copying time",copytime);
  showtime("Percent copying time",100*copytime/totaltime);
  showtime("Time to scale cur col",scaltime);
  showtime("Time to update cur col",colupdtime);
  showtime("Time to update piv row",rowupdtime);
  showtime("Time to update matrix",updatetime);
  showtime("Total update time",dgemmtime);
  showtime("Percent update time",100*dgemmtime/totaltime);
  showtime("Total time in factor",totaltime);

  /*
     printf("proc %d: xpivmsgtime = %g, bcastpivtime = %g, bcastcoltime = %g, bcastrowtime = %g, sendrowtime = %g, recvrowtime = %g\n",
     me,xpivmsgtime,bcastpivtime,bcastcoltime,bcastrowtime,sendrowtime,recvrowtime);
     printf("proc %d: copycoltime = %g, copyrowtime = %g, copyrow1time = %g, copypivrowtime = %g, copypivrow1time = %g\n",
     me,copycoltime,copyrowtime,copyrow1time,copypivrowtime,copypivrow1time);
     printf("proc %d: updatetime = %g, colupdtime = %g, rowupdtime = %g\n",
     me,updatetime,colupdtime,rowupdtime);
     printf("proc %d: msgtime = %g (%g %%), copytime = %g (%g %%), dgemmtime = %g (%g %%), totaltime = %g\n",
     me,msgtime,100*msgtime/totaltime,copytime,100*copytime/totaltime,dgemmtime,100*dgemmtime/totaltime,totaltime);
     */
#endif
}
