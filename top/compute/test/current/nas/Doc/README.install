######################################
# NAS Parallel Benchmarks 2          #
# MPI/F77/C                          #
# Revision 2.3        10/30/97       #
# NASA Ames Research Center          #
# npb@nas.nasa.gov                   #
# http://www.nas.nasa.gov/NAS/NPB/   #
######################################

This README file explains how to build the NAS parallel benchmark suite. 
Please read the technical report (enclosed PostScript file in this
directory) as well. 

1. Edit the site- and machine-specific data in config/make.def
   Several sample versions are included in subdirectory NAS.make.def 
   of the config directory so you may be able to copy one. A clean 
   version is in config/make.def.template.
   Different values for the variable "RAND" are explained at the 
   end of this document. 

2. Each benchmark comes in 5 sizes (classes): A, B, C, W(orkstation)
   and S(ample). Since Fortran 77 doesn't have dynamic memory allocation,
   both the class and the number of processes must be specified at
   compile time.  Some benchmarks (cg, ft, mg, lu, is) run on a
   power-of-2 number of processes. Others (sp, bt) run on a square number
   of processes (1, 4, 9, ...)

   To compile a given benchmark for specific class and number of processes, 
   type "make benchmark-name CLASS={A,B,C,S,W} NPROCS=#" For instance, 
   to create a class B version of the SP benchmark that runs on 
   16 processes, type:

         make sp CLASS=B NPROCS=16

   If you specify an illegal number of processes for a given
   benchmark or an unknown class, the compilation aborts. 

   The executable is placed in the subdirectory "bin" of the
   distribution (or in the directory BINDIR specified in make.def, if
   you've defined it). The name of the executable is 
   "benchmark-name.CLASS.NPROCS", e.g., "sp.B.16". 

   -----------------------------------
   NOTE: THE BUILD PROCEDURE FOR NPB 2 WILL NOT WORK CORRECTLY WITH 
         A PARALLEL MAKE UTILITY. 
   -----------------------------------
         To use a parallel make, configure a benchmark before building 
         it, e.g.:
               cd FT
               make config CLASS=A NPROCS=8
               make CLASS=A NPROCS=8


3. The procedure in item 2 allows you to build one benchmark
   at a time. To build a whole suite, you can type "make suite"
   Make will look in file "config/suite.def" for a list of 
   executables to build. The file contains one line per specification, 
   with comments preceded by "#". Each line contains the name
   of a benchmark, the class, and the number of processors, separated
   by spaces or tabs. For instance, the file could contain:
     
# This is a sample suite file to build several executables
sp      A    16
sp      A    25
sp      A    36
ft      B    1
ft      B    2
ft      B    4


4. The benchmarks have been designed so that they can be run
   on a single processor without an MPI library. A few "dummy" 
   MPI routines are still required for linking. For convenience
   such a library is supplied in the "MPI_dummy" subdirectory of
   the distribution. It contains an mpif.h and mpi.f include files
   which must be used as well. The dummy library is built and
   linked automatically and paths to the include files are defined
   by inserting the line "include ../config/make.dummy" into the
   make.def file (see example in make.def.template). Make sure to 
   read the warnings in the README file in "MPI_dummy".The use of
   the library is fragile and can produce unexpected errors.


================================

The "RAND" variable in make.def
--------------------------------

Most of the NPBs use a random number generator. In two of the NPBs (FT
and EP) the computation of random numbers is included in the timed
part of the calculation, and it is important that the random number
generator be efficient.  The default random number generator package
provided with NPB 2 is called "randi8" and should be used where
possible. It has the following requirements:

randi8:
  1. Uses integer*8 arithmetic. Compiler must support integer*8
  2. Uses the Fortran 90 IAND intrinsic. Compiler must support IAND.
  3. Assumes overflow bits are discarded by the hardware. In particular, 
     that the lowest 46 bits of a*b are always correct, even if the 
     result a*b is larger than 2^64. 

Since randi8 may not work on all machines, we supply the following
alternatives:

randi8_safe
  1. Uses integer*8 arithmetic
  2. Uses the Fortran 90 IBITS intrinsic. 
  3. Does not make any assumptions about overflow. Should always
     work correctly if compiler supports integer*8 and IBITS. 

randdp
  1. Uses double precision arithmetic (to simulate integer*8 operations). 
     Should work with any system with support for 64-bit floating
     point arithmetic.      

randdpvec
  1. Similar to randdp but written to be easier to vectorize. 


