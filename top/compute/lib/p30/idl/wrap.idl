/*
 * wrap.c
 *
 * User-level wrappers that dispatch across the protection boundaries
 * This file was generated by idl
 *
 * Assumes the handle encodes the network number in the second 16 bit word
 */
#include <stdio.h>
#include <p30.h>
#include <p30/arg-blocks.h>
#include <p30/internal.h>

%%

${ret_type} ${func_name}(
@join ",\n", map { "\t$_->[0]\t$_->[1]" } @args
)
{
	${func_name}_in		args;
	${func_name}_out	ret;
	nal_t			*nal;

	if( !ptl_init ) {
		fprintf( stderr, "${func_name}: Not initialized\n" );
		return PTL_NOINIT;
	}

	/*
	 * Copy arguments into the argument block to
	 * hand to the forwarding object
	 */
@map {							\
"	args.$_->[1]	= $_->[1];\n"			\
	}						\
	grep $_->[1] =~ /_in$/,				\
	@args
@map {							\
"	if( $_->[1] ) {\n				\
		args.$_->[1]	= *$_->[1];\n		\
		args.$_->[1]_valid = 1;\n		\
	} else\n					\
		args.$_->[1]_valid = 0;\n\n		\
" } grep $_->[1] =~ /_inout$/, @args

	nal = ptl_interfaces[(${args[0]} >> 16) & 0xF];
	if( !nal )
		return PTL_NOINIT;

	nal->forward(
		nal,
		${index},
		&args,	sizeof(args),
		&ret,	sizeof(ret)
	);

	/*
	 * Copy the results into the return block
	 */
@map { "\tif( $_->[1] )\n\t\t*$_->[1] = ret.$_->[1];\n" } grep $_->[1] =~ /_out$/, @args
@map { "\tif( $_->[1] )\n\t\t*$_->[1] = ret.$_->[1];\n" } grep $_->[1] =~ /_inout$/, @args

	/* Return the result */
	return ret.rc;
}


%%
